/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/exif-parser";
exports.ids = ["vendor-chunks/exif-parser"];
exports.modules = {

/***/ "(ssr)/./node_modules/exif-parser/index.js":
/*!*******************************************!*\
  !*** ./node_modules/exif-parser/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var Parser = __webpack_require__(/*! ./lib/parser */ \"(ssr)/./node_modules/exif-parser/lib/parser.js\");\nfunction getGlobal() {\n    return (1, eval)(\"this\");\n}\nmodule.exports = {\n    create: function(buffer, global) {\n        global = global || getGlobal();\n        if (buffer instanceof global.ArrayBuffer) {\n            var DOMBufferStream = __webpack_require__(/*! ./lib/dom-bufferstream */ \"(ssr)/./node_modules/exif-parser/lib/dom-bufferstream.js\");\n            return new Parser(new DOMBufferStream(buffer, 0, buffer.byteLength, true, global));\n        } else {\n            var NodeBufferStream = __webpack_require__(/*! ./lib/bufferstream */ \"(ssr)/./node_modules/exif-parser/lib/bufferstream.js\");\n            return new Parser(new NodeBufferStream(buffer, 0, buffer.length, true));\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXhpZi1wYXJzZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFFckIsU0FBU0M7SUFDUixPQUFPLENBQUMsR0FBRUMsSUFBRyxFQUFHO0FBQ2pCO0FBRUFDLE9BQU9DLE9BQU8sR0FBRztJQUNoQkMsUUFBUSxTQUFTQyxNQUFNLEVBQUVDLE1BQU07UUFDOUJBLFNBQVNBLFVBQVVOO1FBQ25CLElBQUdLLGtCQUFrQkMsT0FBT0MsV0FBVyxFQUFFO1lBQ3hDLElBQUlDLGtCQUFrQlQsbUJBQU9BLENBQUM7WUFDOUIsT0FBTyxJQUFJRCxPQUFPLElBQUlVLGdCQUFnQkgsUUFBUSxHQUFHQSxPQUFPSSxVQUFVLEVBQUUsTUFBTUg7UUFDM0UsT0FBTztZQUNOLElBQUlJLG1CQUFtQlgsbUJBQU9BLENBQUM7WUFDL0IsT0FBTyxJQUFJRCxPQUFPLElBQUlZLGlCQUFpQkwsUUFBUSxHQUFHQSxPQUFPTSxNQUFNLEVBQUU7UUFDbEU7SUFDRDtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vU0RPcmdhbml6ZXIvLi9ub2RlX21vZHVsZXMvZXhpZi1wYXJzZXIvaW5kZXguanM/ZTViNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUGFyc2VyID0gcmVxdWlyZSgnLi9saWIvcGFyc2VyJyk7XG5cbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcblx0cmV0dXJuICgxLGV2YWwpKCd0aGlzJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRjcmVhdGU6IGZ1bmN0aW9uKGJ1ZmZlciwgZ2xvYmFsKSB7XG5cdFx0Z2xvYmFsID0gZ2xvYmFsIHx8IGdldEdsb2JhbCgpO1xuXHRcdGlmKGJ1ZmZlciBpbnN0YW5jZW9mIGdsb2JhbC5BcnJheUJ1ZmZlcikge1xuXHRcdFx0dmFyIERPTUJ1ZmZlclN0cmVhbSA9IHJlcXVpcmUoJy4vbGliL2RvbS1idWZmZXJzdHJlYW0nKTtcblx0XHRcdHJldHVybiBuZXcgUGFyc2VyKG5ldyBET01CdWZmZXJTdHJlYW0oYnVmZmVyLCAwLCBidWZmZXIuYnl0ZUxlbmd0aCwgdHJ1ZSwgZ2xvYmFsKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBOb2RlQnVmZmVyU3RyZWFtID0gcmVxdWlyZSgnLi9saWIvYnVmZmVyc3RyZWFtJyk7XG5cdFx0XHRyZXR1cm4gbmV3IFBhcnNlcihuZXcgTm9kZUJ1ZmZlclN0cmVhbShidWZmZXIsIDAsIGJ1ZmZlci5sZW5ndGgsIHRydWUpKTtcblx0XHR9XG5cdH1cbn07XG4iXSwibmFtZXMiOlsiUGFyc2VyIiwicmVxdWlyZSIsImdldEdsb2JhbCIsImV2YWwiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlIiwiYnVmZmVyIiwiZ2xvYmFsIiwiQXJyYXlCdWZmZXIiLCJET01CdWZmZXJTdHJlYW0iLCJieXRlTGVuZ3RoIiwiTm9kZUJ1ZmZlclN0cmVhbSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/exif-parser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/exif-parser/lib/bufferstream.js":
/*!******************************************************!*\
  !*** ./node_modules/exif-parser/lib/bufferstream.js ***!
  \******************************************************/
/***/ ((module) => {

eval("function BufferStream(buffer, offset, length, bigEndian) {\n    this.buffer = buffer;\n    this.offset = offset || 0;\n    length = typeof length === \"number\" ? length : buffer.length;\n    this.endPosition = this.offset + length;\n    this.setBigEndian(bigEndian);\n}\nBufferStream.prototype = {\n    setBigEndian: function(bigEndian) {\n        this.bigEndian = !!bigEndian;\n    },\n    nextUInt8: function() {\n        var value = this.buffer.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    },\n    nextInt8: function() {\n        var value = this.buffer.readInt8(this.offset);\n        this.offset += 1;\n        return value;\n    },\n    nextUInt16: function() {\n        var value = this.bigEndian ? this.buffer.readUInt16BE(this.offset) : this.buffer.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    },\n    nextUInt32: function() {\n        var value = this.bigEndian ? this.buffer.readUInt32BE(this.offset) : this.buffer.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    },\n    nextInt16: function() {\n        var value = this.bigEndian ? this.buffer.readInt16BE(this.offset) : this.buffer.readInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    },\n    nextInt32: function() {\n        var value = this.bigEndian ? this.buffer.readInt32BE(this.offset) : this.buffer.readInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    },\n    nextFloat: function() {\n        var value = this.bigEndian ? this.buffer.readFloatBE(this.offset) : this.buffer.readFloatLE(this.offset);\n        this.offset += 4;\n        return value;\n    },\n    nextDouble: function() {\n        var value = this.bigEndian ? this.buffer.readDoubleBE(this.offset) : this.buffer.readDoubleLE(this.offset);\n        this.offset += 8;\n        return value;\n    },\n    nextBuffer: function(length) {\n        var value = this.buffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return value;\n    },\n    remainingLength: function() {\n        return this.endPosition - this.offset;\n    },\n    nextString: function(length) {\n        var value = this.buffer.toString(\"utf8\", this.offset, this.offset + length);\n        this.offset += length;\n        return value;\n    },\n    mark: function() {\n        var self = this;\n        return {\n            openWithOffset: function(offset) {\n                offset = (offset || 0) + this.offset;\n                return new BufferStream(self.buffer, offset, self.endPosition - offset, self.bigEndian);\n            },\n            offset: this.offset\n        };\n    },\n    offsetFrom: function(marker) {\n        return this.offset - marker.offset;\n    },\n    skip: function(amount) {\n        this.offset += amount;\n    },\n    branch: function(offset, length) {\n        length = typeof length === \"number\" ? length : this.endPosition - (this.offset + offset);\n        return new BufferStream(this.buffer, this.offset + offset, length, this.bigEndian);\n    }\n};\nmodule.exports = BufferStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/exif-parser/lib/bufferstream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/exif-parser/lib/date.js":
/*!**********************************************!*\
  !*** ./node_modules/exif-parser/lib/date.js ***!
  \**********************************************/
/***/ ((module) => {

eval("function parseNumber(s) {\n    return parseInt(s, 10);\n}\n//in seconds\nvar hours = 3600;\nvar minutes = 60;\n//take date (year, month, day) and time (hour, minutes, seconds) digits in UTC\n//and return a timestamp in seconds\nfunction parseDateTimeParts(dateParts, timeParts) {\n    dateParts = dateParts.map(parseNumber);\n    timeParts = timeParts.map(parseNumber);\n    var year = dateParts[0];\n    var month = dateParts[1] - 1;\n    var day = dateParts[2];\n    var hours = timeParts[0];\n    var minutes = timeParts[1];\n    var seconds = timeParts[2];\n    var date = Date.UTC(year, month, day, hours, minutes, seconds, 0);\n    var timestamp = date / 1000;\n    return timestamp;\n}\n//parse date with \"2004-09-04T23:39:06-08:00\" format,\n//one of the formats supported by ISO 8601, and\n//convert to utc timestamp in seconds\nfunction parseDateWithTimezoneFormat(dateTimeStr) {\n    var dateParts = dateTimeStr.substr(0, 10).split(\"-\");\n    var timeParts = dateTimeStr.substr(11, 8).split(\":\");\n    var timezoneStr = dateTimeStr.substr(19, 6);\n    var timezoneParts = timezoneStr.split(\":\").map(parseNumber);\n    var timezoneOffset = timezoneParts[0] * hours + timezoneParts[1] * minutes;\n    var timestamp = parseDateTimeParts(dateParts, timeParts);\n    //minus because the timezoneOffset describes\n    //how much the described time is ahead of UTC\n    timestamp -= timezoneOffset;\n    if (typeof timestamp === \"number\" && !isNaN(timestamp)) {\n        return timestamp;\n    }\n}\n//parse date with \"YYYY:MM:DD hh:mm:ss\" format, convert to utc timestamp in seconds\nfunction parseDateWithSpecFormat(dateTimeStr) {\n    var parts = dateTimeStr.split(\" \"), dateParts = parts[0].split(\":\"), timeParts = parts[1].split(\":\");\n    var timestamp = parseDateTimeParts(dateParts, timeParts);\n    if (typeof timestamp === \"number\" && !isNaN(timestamp)) {\n        return timestamp;\n    }\n}\nfunction parseExifDate(dateTimeStr) {\n    //some easy checks to determine two common date formats\n    //is the date in the standard \"YYYY:MM:DD hh:mm:ss\" format?\n    var isSpecFormat = dateTimeStr.length === 19 && dateTimeStr.charAt(4) === \":\";\n    //is the date in the non-standard format,\n    //\"2004-09-04T23:39:06-08:00\" to include a timezone?\n    var isTimezoneFormat = dateTimeStr.length === 25 && dateTimeStr.charAt(10) === \"T\";\n    var timestamp;\n    if (isTimezoneFormat) {\n        return parseDateWithTimezoneFormat(dateTimeStr);\n    } else if (isSpecFormat) {\n        return parseDateWithSpecFormat(dateTimeStr);\n    }\n}\nmodule.exports = {\n    parseDateWithSpecFormat: parseDateWithSpecFormat,\n    parseDateWithTimezoneFormat: parseDateWithTimezoneFormat,\n    parseExifDate: parseExifDate\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TRE9yZ2FuaXplci8uL25vZGVfbW9kdWxlcy9leGlmLXBhcnNlci9saWIvZGF0ZS5qcz85YWIwIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBhcnNlTnVtYmVyKHMpIHtcblx0cmV0dXJuIHBhcnNlSW50KHMsIDEwKTtcbn1cblxuLy9pbiBzZWNvbmRzXG52YXIgaG91cnMgPSAzNjAwO1xudmFyIG1pbnV0ZXMgPSA2MDtcblxuLy90YWtlIGRhdGUgKHllYXIsIG1vbnRoLCBkYXkpIGFuZCB0aW1lIChob3VyLCBtaW51dGVzLCBzZWNvbmRzKSBkaWdpdHMgaW4gVVRDXG4vL2FuZCByZXR1cm4gYSB0aW1lc3RhbXAgaW4gc2Vjb25kc1xuZnVuY3Rpb24gcGFyc2VEYXRlVGltZVBhcnRzKGRhdGVQYXJ0cywgdGltZVBhcnRzKSB7XG5cdGRhdGVQYXJ0cyA9IGRhdGVQYXJ0cy5tYXAocGFyc2VOdW1iZXIpO1xuXHR0aW1lUGFydHMgPSB0aW1lUGFydHMubWFwKHBhcnNlTnVtYmVyKTtcblx0dmFyIHllYXIgPSBkYXRlUGFydHNbMF07XG5cdHZhciBtb250aCA9IGRhdGVQYXJ0c1sxXSAtIDE7XG5cdHZhciBkYXkgPSBkYXRlUGFydHNbMl07XG5cdHZhciBob3VycyA9IHRpbWVQYXJ0c1swXTtcblx0dmFyIG1pbnV0ZXMgPSB0aW1lUGFydHNbMV07XG5cdHZhciBzZWNvbmRzID0gdGltZVBhcnRzWzJdO1xuXHR2YXIgZGF0ZSA9IERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCAwKTtcblx0dmFyIHRpbWVzdGFtcCA9IGRhdGUgLyAxMDAwO1xuXHRyZXR1cm4gdGltZXN0YW1wO1xufVxuXG4vL3BhcnNlIGRhdGUgd2l0aCBcIjIwMDQtMDktMDRUMjM6Mzk6MDYtMDg6MDBcIiBmb3JtYXQsXG4vL29uZSBvZiB0aGUgZm9ybWF0cyBzdXBwb3J0ZWQgYnkgSVNPIDg2MDEsIGFuZFxuLy9jb252ZXJ0IHRvIHV0YyB0aW1lc3RhbXAgaW4gc2Vjb25kc1xuZnVuY3Rpb24gcGFyc2VEYXRlV2l0aFRpbWV6b25lRm9ybWF0KGRhdGVUaW1lU3RyKSB7XG5cblx0dmFyIGRhdGVQYXJ0cyA9IGRhdGVUaW1lU3RyLnN1YnN0cigwLCAxMCkuc3BsaXQoJy0nKTtcblx0dmFyIHRpbWVQYXJ0cyA9IGRhdGVUaW1lU3RyLnN1YnN0cigxMSwgOCkuc3BsaXQoJzonKTtcblx0dmFyIHRpbWV6b25lU3RyID0gZGF0ZVRpbWVTdHIuc3Vic3RyKDE5LCA2KTtcblx0dmFyIHRpbWV6b25lUGFydHMgPSB0aW1lem9uZVN0ci5zcGxpdCgnOicpLm1hcChwYXJzZU51bWJlcik7XG5cdHZhciB0aW1lem9uZU9mZnNldCA9ICh0aW1lem9uZVBhcnRzWzBdICogaG91cnMpICtcblx0XHQodGltZXpvbmVQYXJ0c1sxXSAqIG1pbnV0ZXMpO1xuXG5cdHZhciB0aW1lc3RhbXAgPSBwYXJzZURhdGVUaW1lUGFydHMoZGF0ZVBhcnRzLCB0aW1lUGFydHMpO1xuXHQvL21pbnVzIGJlY2F1c2UgdGhlIHRpbWV6b25lT2Zmc2V0IGRlc2NyaWJlc1xuXHQvL2hvdyBtdWNoIHRoZSBkZXNjcmliZWQgdGltZSBpcyBhaGVhZCBvZiBVVENcblx0dGltZXN0YW1wIC09IHRpbWV6b25lT2Zmc2V0O1xuXG5cdGlmKHR5cGVvZiB0aW1lc3RhbXAgPT09ICdudW1iZXInICYmICFpc05hTih0aW1lc3RhbXApKSB7XG5cdFx0cmV0dXJuIHRpbWVzdGFtcDtcblx0fVxufVxuXG4vL3BhcnNlIGRhdGUgd2l0aCBcIllZWVk6TU06REQgaGg6bW06c3NcIiBmb3JtYXQsIGNvbnZlcnQgdG8gdXRjIHRpbWVzdGFtcCBpbiBzZWNvbmRzXG5mdW5jdGlvbiBwYXJzZURhdGVXaXRoU3BlY0Zvcm1hdChkYXRlVGltZVN0cikge1xuXHR2YXIgcGFydHMgPSBkYXRlVGltZVN0ci5zcGxpdCgnICcpLFxuXHRcdGRhdGVQYXJ0cyA9IHBhcnRzWzBdLnNwbGl0KCc6JyksXG5cdFx0dGltZVBhcnRzID0gcGFydHNbMV0uc3BsaXQoJzonKTtcblxuXHR2YXIgdGltZXN0YW1wID0gcGFyc2VEYXRlVGltZVBhcnRzKGRhdGVQYXJ0cywgdGltZVBhcnRzKTtcblxuXHRpZih0eXBlb2YgdGltZXN0YW1wID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odGltZXN0YW1wKSkge1xuXHRcdHJldHVybiB0aW1lc3RhbXA7XG5cdH1cbn1cblxuZnVuY3Rpb24gcGFyc2VFeGlmRGF0ZShkYXRlVGltZVN0cikge1xuXHQvL3NvbWUgZWFzeSBjaGVja3MgdG8gZGV0ZXJtaW5lIHR3byBjb21tb24gZGF0ZSBmb3JtYXRzXG5cblx0Ly9pcyB0aGUgZGF0ZSBpbiB0aGUgc3RhbmRhcmQgXCJZWVlZOk1NOkREIGhoOm1tOnNzXCIgZm9ybWF0P1xuXHR2YXIgaXNTcGVjRm9ybWF0ID0gZGF0ZVRpbWVTdHIubGVuZ3RoID09PSAxOSAmJlxuXHRcdGRhdGVUaW1lU3RyLmNoYXJBdCg0KSA9PT0gJzonO1xuXHQvL2lzIHRoZSBkYXRlIGluIHRoZSBub24tc3RhbmRhcmQgZm9ybWF0LFxuXHQvL1wiMjAwNC0wOS0wNFQyMzozOTowNi0wODowMFwiIHRvIGluY2x1ZGUgYSB0aW1lem9uZT9cblx0dmFyIGlzVGltZXpvbmVGb3JtYXQgPSBkYXRlVGltZVN0ci5sZW5ndGggPT09IDI1ICYmXG5cdFx0ZGF0ZVRpbWVTdHIuY2hhckF0KDEwKSA9PT0gJ1QnO1xuXHR2YXIgdGltZXN0YW1wO1xuXG5cdGlmKGlzVGltZXpvbmVGb3JtYXQpIHtcblx0XHRyZXR1cm4gcGFyc2VEYXRlV2l0aFRpbWV6b25lRm9ybWF0KGRhdGVUaW1lU3RyKTtcblx0fVxuXHRlbHNlIGlmKGlzU3BlY0Zvcm1hdCkge1xuXHRcdHJldHVybiBwYXJzZURhdGVXaXRoU3BlY0Zvcm1hdChkYXRlVGltZVN0cik7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHBhcnNlRGF0ZVdpdGhTcGVjRm9ybWF0OiBwYXJzZURhdGVXaXRoU3BlY0Zvcm1hdCxcblx0cGFyc2VEYXRlV2l0aFRpbWV6b25lRm9ybWF0OiBwYXJzZURhdGVXaXRoVGltZXpvbmVGb3JtYXQsXG5cdHBhcnNlRXhpZkRhdGU6IHBhcnNlRXhpZkRhdGVcbn07XG4iXSwibmFtZXMiOlsicGFyc2VOdW1iZXIiLCJzIiwicGFyc2VJbnQiLCJob3VycyIsIm1pbnV0ZXMiLCJwYXJzZURhdGVUaW1lUGFydHMiLCJkYXRlUGFydHMiLCJ0aW1lUGFydHMiLCJtYXAiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJzZWNvbmRzIiwiZGF0ZSIsIkRhdGUiLCJVVEMiLCJ0aW1lc3RhbXAiLCJwYXJzZURhdGVXaXRoVGltZXpvbmVGb3JtYXQiLCJkYXRlVGltZVN0ciIsInN1YnN0ciIsInNwbGl0IiwidGltZXpvbmVTdHIiLCJ0aW1lem9uZVBhcnRzIiwidGltZXpvbmVPZmZzZXQiLCJpc05hTiIsInBhcnNlRGF0ZVdpdGhTcGVjRm9ybWF0IiwicGFydHMiLCJwYXJzZUV4aWZEYXRlIiwiaXNTcGVjRm9ybWF0IiwibGVuZ3RoIiwiY2hhckF0IiwiaXNUaW1lem9uZUZvcm1hdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFlBQVlDLENBQUM7SUFDckIsT0FBT0MsU0FBU0QsR0FBRztBQUNwQjtBQUVBLFlBQVk7QUFDWixJQUFJRSxRQUFRO0FBQ1osSUFBSUMsVUFBVTtBQUVkLDhFQUE4RTtBQUM5RSxtQ0FBbUM7QUFDbkMsU0FBU0MsbUJBQW1CQyxTQUFTLEVBQUVDLFNBQVM7SUFDL0NELFlBQVlBLFVBQVVFLEdBQUcsQ0FBQ1I7SUFDMUJPLFlBQVlBLFVBQVVDLEdBQUcsQ0FBQ1I7SUFDMUIsSUFBSVMsT0FBT0gsU0FBUyxDQUFDLEVBQUU7SUFDdkIsSUFBSUksUUFBUUosU0FBUyxDQUFDLEVBQUUsR0FBRztJQUMzQixJQUFJSyxNQUFNTCxTQUFTLENBQUMsRUFBRTtJQUN0QixJQUFJSCxRQUFRSSxTQUFTLENBQUMsRUFBRTtJQUN4QixJQUFJSCxVQUFVRyxTQUFTLENBQUMsRUFBRTtJQUMxQixJQUFJSyxVQUFVTCxTQUFTLENBQUMsRUFBRTtJQUMxQixJQUFJTSxPQUFPQyxLQUFLQyxHQUFHLENBQUNOLE1BQU1DLE9BQU9DLEtBQUtSLE9BQU9DLFNBQVNRLFNBQVM7SUFDL0QsSUFBSUksWUFBWUgsT0FBTztJQUN2QixPQUFPRztBQUNSO0FBRUEscURBQXFEO0FBQ3JELCtDQUErQztBQUMvQyxxQ0FBcUM7QUFDckMsU0FBU0MsNEJBQTRCQyxXQUFXO0lBRS9DLElBQUlaLFlBQVlZLFlBQVlDLE1BQU0sQ0FBQyxHQUFHLElBQUlDLEtBQUssQ0FBQztJQUNoRCxJQUFJYixZQUFZVyxZQUFZQyxNQUFNLENBQUMsSUFBSSxHQUFHQyxLQUFLLENBQUM7SUFDaEQsSUFBSUMsY0FBY0gsWUFBWUMsTUFBTSxDQUFDLElBQUk7SUFDekMsSUFBSUcsZ0JBQWdCRCxZQUFZRCxLQUFLLENBQUMsS0FBS1osR0FBRyxDQUFDUjtJQUMvQyxJQUFJdUIsaUJBQWlCLEFBQUNELGFBQWEsQ0FBQyxFQUFFLEdBQUduQixRQUN2Q21CLGFBQWEsQ0FBQyxFQUFFLEdBQUdsQjtJQUVyQixJQUFJWSxZQUFZWCxtQkFBbUJDLFdBQVdDO0lBQzlDLDRDQUE0QztJQUM1Qyw2Q0FBNkM7SUFDN0NTLGFBQWFPO0lBRWIsSUFBRyxPQUFPUCxjQUFjLFlBQVksQ0FBQ1EsTUFBTVIsWUFBWTtRQUN0RCxPQUFPQTtJQUNSO0FBQ0Q7QUFFQSxtRkFBbUY7QUFDbkYsU0FBU1Msd0JBQXdCUCxXQUFXO0lBQzNDLElBQUlRLFFBQVFSLFlBQVlFLEtBQUssQ0FBQyxNQUM3QmQsWUFBWW9CLEtBQUssQ0FBQyxFQUFFLENBQUNOLEtBQUssQ0FBQyxNQUMzQmIsWUFBWW1CLEtBQUssQ0FBQyxFQUFFLENBQUNOLEtBQUssQ0FBQztJQUU1QixJQUFJSixZQUFZWCxtQkFBbUJDLFdBQVdDO0lBRTlDLElBQUcsT0FBT1MsY0FBYyxZQUFZLENBQUNRLE1BQU1SLFlBQVk7UUFDdEQsT0FBT0E7SUFDUjtBQUNEO0FBRUEsU0FBU1csY0FBY1QsV0FBVztJQUNqQyx1REFBdUQ7SUFFdkQsMkRBQTJEO0lBQzNELElBQUlVLGVBQWVWLFlBQVlXLE1BQU0sS0FBSyxNQUN6Q1gsWUFBWVksTUFBTSxDQUFDLE9BQU87SUFDM0IseUNBQXlDO0lBQ3pDLG9EQUFvRDtJQUNwRCxJQUFJQyxtQkFBbUJiLFlBQVlXLE1BQU0sS0FBSyxNQUM3Q1gsWUFBWVksTUFBTSxDQUFDLFFBQVE7SUFDNUIsSUFBSWQ7SUFFSixJQUFHZSxrQkFBa0I7UUFDcEIsT0FBT2QsNEJBQTRCQztJQUNwQyxPQUNLLElBQUdVLGNBQWM7UUFDckIsT0FBT0gsd0JBQXdCUDtJQUNoQztBQUNEO0FBRUFjLE9BQU9DLE9BQU8sR0FBRztJQUNoQlIseUJBQXlCQTtJQUN6QlIsNkJBQTZCQTtJQUM3QlUsZUFBZUE7QUFDaEIiLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXhpZi1wYXJzZXIvbGliL2RhdGUuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/exif-parser/lib/date.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/exif-parser/lib/dom-bufferstream.js":
/*!**********************************************************!*\
  !*** ./node_modules/exif-parser/lib/dom-bufferstream.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("/*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */ function DOMBufferStream(arrayBuffer, offset, length, bigEndian, global, parentOffset) {\n    this.global = global;\n    offset = offset || 0;\n    length = length || arrayBuffer.byteLength - offset;\n    this.arrayBuffer = arrayBuffer.slice(offset, offset + length);\n    this.view = new global.DataView(this.arrayBuffer, 0, this.arrayBuffer.byteLength);\n    this.setBigEndian(bigEndian);\n    this.offset = 0;\n    this.parentOffset = (parentOffset || 0) + offset;\n}\nDOMBufferStream.prototype = {\n    setBigEndian: function(bigEndian) {\n        this.littleEndian = !bigEndian;\n    },\n    nextUInt8: function() {\n        var value = this.view.getUint8(this.offset);\n        this.offset += 1;\n        return value;\n    },\n    nextInt8: function() {\n        var value = this.view.getInt8(this.offset);\n        this.offset += 1;\n        return value;\n    },\n    nextUInt16: function() {\n        var value = this.view.getUint16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    },\n    nextUInt32: function() {\n        var value = this.view.getUint32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    },\n    nextInt16: function() {\n        var value = this.view.getInt16(this.offset, this.littleEndian);\n        this.offset += 2;\n        return value;\n    },\n    nextInt32: function() {\n        var value = this.view.getInt32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    },\n    nextFloat: function() {\n        var value = this.view.getFloat32(this.offset, this.littleEndian);\n        this.offset += 4;\n        return value;\n    },\n    nextDouble: function() {\n        var value = this.view.getFloat64(this.offset, this.littleEndian);\n        this.offset += 8;\n        return value;\n    },\n    nextBuffer: function(length) {\n        //this won't work in IE10\n        var value = this.arrayBuffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return value;\n    },\n    remainingLength: function() {\n        return this.arrayBuffer.byteLength - this.offset;\n    },\n    nextString: function(length) {\n        var value = this.arrayBuffer.slice(this.offset, this.offset + length);\n        value = String.fromCharCode.apply(null, new this.global.Uint8Array(value));\n        this.offset += length;\n        return value;\n    },\n    mark: function() {\n        var self = this;\n        return {\n            openWithOffset: function(offset) {\n                offset = (offset || 0) + this.offset;\n                return new DOMBufferStream(self.arrayBuffer, offset, self.arrayBuffer.byteLength - offset, !self.littleEndian, self.global, self.parentOffset);\n            },\n            offset: this.offset,\n            getParentOffset: function() {\n                return self.parentOffset;\n            }\n        };\n    },\n    offsetFrom: function(marker) {\n        return this.parentOffset + this.offset - (marker.offset + marker.getParentOffset());\n    },\n    skip: function(amount) {\n        this.offset += amount;\n    },\n    branch: function(offset, length) {\n        length = typeof length === \"number\" ? length : this.arrayBuffer.byteLength - (this.offset + offset);\n        return new DOMBufferStream(this.arrayBuffer, this.offset + offset, length, !this.littleEndian, this.global, this.parentOffset);\n    }\n};\nmodule.exports = DOMBufferStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/exif-parser/lib/dom-bufferstream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/exif-parser/lib/exif-tags.js":
/*!***************************************************!*\
  !*** ./node_modules/exif-parser/lib/exif-tags.js ***!
  \***************************************************/
/***/ ((module) => {

eval("module.exports = {\n    exif: {\n        0x0001: \"InteropIndex\",\n        0x0002: \"InteropVersion\",\n        0x000B: \"ProcessingSoftware\",\n        0x00FE: \"SubfileType\",\n        0x00FF: \"OldSubfileType\",\n        0x0100: \"ImageWidth\",\n        0x0101: \"ImageHeight\",\n        0x0102: \"BitsPerSample\",\n        0x0103: \"Compression\",\n        0x0106: \"PhotometricInterpretation\",\n        0x0107: \"Thresholding\",\n        0x0108: \"CellWidth\",\n        0x0109: \"CellLength\",\n        0x010A: \"FillOrder\",\n        0x010D: \"DocumentName\",\n        0x010E: \"ImageDescription\",\n        0x010F: \"Make\",\n        0x0110: \"Model\",\n        0x0111: \"StripOffsets\",\n        0x0112: \"Orientation\",\n        0x0115: \"SamplesPerPixel\",\n        0x0116: \"RowsPerStrip\",\n        0x0117: \"StripByteCounts\",\n        0x0118: \"MinSampleValue\",\n        0x0119: \"MaxSampleValue\",\n        0x011A: \"XResolution\",\n        0x011B: \"YResolution\",\n        0x011C: \"PlanarConfiguration\",\n        0x011D: \"PageName\",\n        0x011E: \"XPosition\",\n        0x011F: \"YPosition\",\n        0x0120: \"FreeOffsets\",\n        0x0121: \"FreeByteCounts\",\n        0x0122: \"GrayResponseUnit\",\n        0x0123: \"GrayResponseCurve\",\n        0x0124: \"T4Options\",\n        0x0125: \"T6Options\",\n        0x0128: \"ResolutionUnit\",\n        0x0129: \"PageNumber\",\n        0x012C: \"ColorResponseUnit\",\n        0x012D: \"TransferFunction\",\n        0x0131: \"Software\",\n        0x0132: \"ModifyDate\",\n        0x013B: \"Artist\",\n        0x013C: \"HostComputer\",\n        0x013D: \"Predictor\",\n        0x013E: \"WhitePoint\",\n        0x013F: \"PrimaryChromaticities\",\n        0x0140: \"ColorMap\",\n        0x0141: \"HalftoneHints\",\n        0x0142: \"TileWidth\",\n        0x0143: \"TileLength\",\n        0x0144: \"TileOffsets\",\n        0x0145: \"TileByteCounts\",\n        0x0146: \"BadFaxLines\",\n        0x0147: \"CleanFaxData\",\n        0x0148: \"ConsecutiveBadFaxLines\",\n        0x014A: \"SubIFD\",\n        0x014C: \"InkSet\",\n        0x014D: \"InkNames\",\n        0x014E: \"NumberofInks\",\n        0x0150: \"DotRange\",\n        0x0151: \"TargetPrinter\",\n        0x0152: \"ExtraSamples\",\n        0x0153: \"SampleFormat\",\n        0x0154: \"SMinSampleValue\",\n        0x0155: \"SMaxSampleValue\",\n        0x0156: \"TransferRange\",\n        0x0157: \"ClipPath\",\n        0x0158: \"XClipPathUnits\",\n        0x0159: \"YClipPathUnits\",\n        0x015A: \"Indexed\",\n        0x015B: \"JPEGTables\",\n        0x015F: \"OPIProxy\",\n        0x0190: \"GlobalParametersIFD\",\n        0x0191: \"ProfileType\",\n        0x0192: \"FaxProfile\",\n        0x0193: \"CodingMethods\",\n        0x0194: \"VersionYear\",\n        0x0195: \"ModeNumber\",\n        0x01B1: \"Decode\",\n        0x01B2: \"DefaultImageColor\",\n        0x01B3: \"T82Options\",\n        0x01B5: \"JPEGTables\",\n        0x0200: \"JPEGProc\",\n        0x0201: \"ThumbnailOffset\",\n        0x0202: \"ThumbnailLength\",\n        0x0203: \"JPEGRestartInterval\",\n        0x0205: \"JPEGLosslessPredictors\",\n        0x0206: \"JPEGPointTransforms\",\n        0x0207: \"JPEGQTables\",\n        0x0208: \"JPEGDCTables\",\n        0x0209: \"JPEGACTables\",\n        0x0211: \"YCbCrCoefficients\",\n        0x0212: \"YCbCrSubSampling\",\n        0x0213: \"YCbCrPositioning\",\n        0x0214: \"ReferenceBlackWhite\",\n        0x022F: \"StripRowCounts\",\n        0x02BC: \"ApplicationNotes\",\n        0x03E7: \"USPTOMiscellaneous\",\n        0x1000: \"RelatedImageFileFormat\",\n        0x1001: \"RelatedImageWidth\",\n        0x1002: \"RelatedImageHeight\",\n        0x4746: \"Rating\",\n        0x4747: \"XP_DIP_XML\",\n        0x4748: \"StitchInfo\",\n        0x4749: \"RatingPercent\",\n        0x800D: \"ImageID\",\n        0x80A3: \"WangTag1\",\n        0x80A4: \"WangAnnotation\",\n        0x80A5: \"WangTag3\",\n        0x80A6: \"WangTag4\",\n        0x80E3: \"Matteing\",\n        0x80E4: \"DataType\",\n        0x80E5: \"ImageDepth\",\n        0x80E6: \"TileDepth\",\n        0x827D: \"Model2\",\n        0x828D: \"CFARepeatPatternDim\",\n        0x828E: \"CFAPattern2\",\n        0x828F: \"BatteryLevel\",\n        0x8290: \"KodakIFD\",\n        0x8298: \"Copyright\",\n        0x829A: \"ExposureTime\",\n        0x829D: \"FNumber\",\n        0x82A5: \"MDFileTag\",\n        0x82A6: \"MDScalePixel\",\n        0x82A7: \"MDColorTable\",\n        0x82A8: \"MDLabName\",\n        0x82A9: \"MDSampleInfo\",\n        0x82AA: \"MDPrepDate\",\n        0x82AB: \"MDPrepTime\",\n        0x82AC: \"MDFileUnits\",\n        0x830E: \"PixelScale\",\n        0x8335: \"AdventScale\",\n        0x8336: \"AdventRevision\",\n        0x835C: \"UIC1Tag\",\n        0x835D: \"UIC2Tag\",\n        0x835E: \"UIC3Tag\",\n        0x835F: \"UIC4Tag\",\n        0x83BB: \"IPTC-NAA\",\n        0x847E: \"IntergraphPacketData\",\n        0x847F: \"IntergraphFlagRegisters\",\n        0x8480: \"IntergraphMatrix\",\n        0x8481: \"INGRReserved\",\n        0x8482: \"ModelTiePoint\",\n        0x84E0: \"Site\",\n        0x84E1: \"ColorSequence\",\n        0x84E2: \"IT8Header\",\n        0x84E3: \"RasterPadding\",\n        0x84E4: \"BitsPerRunLength\",\n        0x84E5: \"BitsPerExtendedRunLength\",\n        0x84E6: \"ColorTable\",\n        0x84E7: \"ImageColorIndicator\",\n        0x84E8: \"BackgroundColorIndicator\",\n        0x84E9: \"ImageColorValue\",\n        0x84EA: \"BackgroundColorValue\",\n        0x84EB: \"PixelIntensityRange\",\n        0x84EC: \"TransparencyIndicator\",\n        0x84ED: \"ColorCharacterization\",\n        0x84EE: \"HCUsage\",\n        0x84EF: \"TrapIndicator\",\n        0x84F0: \"CMYKEquivalent\",\n        0x8546: \"SEMInfo\",\n        0x8568: \"AFCP_IPTC\",\n        0x85B8: \"PixelMagicJBIGOptions\",\n        0x85D8: \"ModelTransform\",\n        0x8602: \"WB_GRGBLevels\",\n        0x8606: \"LeafData\",\n        0x8649: \"PhotoshopSettings\",\n        0x8769: \"ExifOffset\",\n        0x8773: \"ICC_Profile\",\n        0x877F: \"TIFF_FXExtensions\",\n        0x8780: \"MultiProfiles\",\n        0x8781: \"SharedData\",\n        0x8782: \"T88Options\",\n        0x87AC: \"ImageLayer\",\n        0x87AF: \"GeoTiffDirectory\",\n        0x87B0: \"GeoTiffDoubleParams\",\n        0x87B1: \"GeoTiffAsciiParams\",\n        0x8822: \"ExposureProgram\",\n        0x8824: \"SpectralSensitivity\",\n        0x8825: \"GPSInfo\",\n        0x8827: \"ISO\",\n        0x8828: \"Opto-ElectricConvFactor\",\n        0x8829: \"Interlace\",\n        0x882A: \"TimeZoneOffset\",\n        0x882B: \"SelfTimerMode\",\n        0x8830: \"SensitivityType\",\n        0x8831: \"StandardOutputSensitivity\",\n        0x8832: \"RecommendedExposureIndex\",\n        0x8833: \"ISOSpeed\",\n        0x8834: \"ISOSpeedLatitudeyyy\",\n        0x8835: \"ISOSpeedLatitudezzz\",\n        0x885C: \"FaxRecvParams\",\n        0x885D: \"FaxSubAddress\",\n        0x885E: \"FaxRecvTime\",\n        0x888A: \"LeafSubIFD\",\n        0x9000: \"ExifVersion\",\n        0x9003: \"DateTimeOriginal\",\n        0x9004: \"CreateDate\",\n        0x9101: \"ComponentsConfiguration\",\n        0x9102: \"CompressedBitsPerPixel\",\n        0x9201: \"ShutterSpeedValue\",\n        0x9202: \"ApertureValue\",\n        0x9203: \"BrightnessValue\",\n        0x9204: \"ExposureCompensation\",\n        0x9205: \"MaxApertureValue\",\n        0x9206: \"SubjectDistance\",\n        0x9207: \"MeteringMode\",\n        0x9208: \"LightSource\",\n        0x9209: \"Flash\",\n        0x920A: \"FocalLength\",\n        0x920B: \"FlashEnergy\",\n        0x920C: \"SpatialFrequencyResponse\",\n        0x920D: \"Noise\",\n        0x920E: \"FocalPlaneXResolution\",\n        0x920F: \"FocalPlaneYResolution\",\n        0x9210: \"FocalPlaneResolutionUnit\",\n        0x9211: \"ImageNumber\",\n        0x9212: \"SecurityClassification\",\n        0x9213: \"ImageHistory\",\n        0x9214: \"SubjectArea\",\n        0x9215: \"ExposureIndex\",\n        0x9216: \"TIFF-EPStandardID\",\n        0x9217: \"SensingMethod\",\n        0x923A: \"CIP3DataFile\",\n        0x923B: \"CIP3Sheet\",\n        0x923C: \"CIP3Side\",\n        0x923F: \"StoNits\",\n        0x927C: \"MakerNote\",\n        0x9286: \"UserComment\",\n        0x9290: \"SubSecTime\",\n        0x9291: \"SubSecTimeOriginal\",\n        0x9292: \"SubSecTimeDigitized\",\n        0x932F: \"MSDocumentText\",\n        0x9330: \"MSPropertySetStorage\",\n        0x9331: \"MSDocumentTextPosition\",\n        0x935C: \"ImageSourceData\",\n        0x9C9B: \"XPTitle\",\n        0x9C9C: \"XPComment\",\n        0x9C9D: \"XPAuthor\",\n        0x9C9E: \"XPKeywords\",\n        0x9C9F: \"XPSubject\",\n        0xA000: \"FlashpixVersion\",\n        0xA001: \"ColorSpace\",\n        0xA002: \"ExifImageWidth\",\n        0xA003: \"ExifImageHeight\",\n        0xA004: \"RelatedSoundFile\",\n        0xA005: \"InteropOffset\",\n        0xA20B: \"FlashEnergy\",\n        0xA20C: \"SpatialFrequencyResponse\",\n        0xA20D: \"Noise\",\n        0xA20E: \"FocalPlaneXResolution\",\n        0xA20F: \"FocalPlaneYResolution\",\n        0xA210: \"FocalPlaneResolutionUnit\",\n        0xA211: \"ImageNumber\",\n        0xA212: \"SecurityClassification\",\n        0xA213: \"ImageHistory\",\n        0xA214: \"SubjectLocation\",\n        0xA215: \"ExposureIndex\",\n        0xA216: \"TIFF-EPStandardID\",\n        0xA217: \"SensingMethod\",\n        0xA300: \"FileSource\",\n        0xA301: \"SceneType\",\n        0xA302: \"CFAPattern\",\n        0xA401: \"CustomRendered\",\n        0xA402: \"ExposureMode\",\n        0xA403: \"WhiteBalance\",\n        0xA404: \"DigitalZoomRatio\",\n        0xA405: \"FocalLengthIn35mmFormat\",\n        0xA406: \"SceneCaptureType\",\n        0xA407: \"GainControl\",\n        0xA408: \"Contrast\",\n        0xA409: \"Saturation\",\n        0xA40A: \"Sharpness\",\n        0xA40B: \"DeviceSettingDescription\",\n        0xA40C: \"SubjectDistanceRange\",\n        0xA420: \"ImageUniqueID\",\n        0xA430: \"OwnerName\",\n        0xA431: \"SerialNumber\",\n        0xA432: \"LensInfo\",\n        0xA433: \"LensMake\",\n        0xA434: \"LensModel\",\n        0xA435: \"LensSerialNumber\",\n        0xA480: \"GDALMetadata\",\n        0xA481: \"GDALNoData\",\n        0xA500: \"Gamma\",\n        0xAFC0: \"ExpandSoftware\",\n        0xAFC1: \"ExpandLens\",\n        0xAFC2: \"ExpandFilm\",\n        0xAFC3: \"ExpandFilterLens\",\n        0xAFC4: \"ExpandScanner\",\n        0xAFC5: \"ExpandFlashLamp\",\n        0xBC01: \"PixelFormat\",\n        0xBC02: \"Transformation\",\n        0xBC03: \"Uncompressed\",\n        0xBC04: \"ImageType\",\n        0xBC80: \"ImageWidth\",\n        0xBC81: \"ImageHeight\",\n        0xBC82: \"WidthResolution\",\n        0xBC83: \"HeightResolution\",\n        0xBCC0: \"ImageOffset\",\n        0xBCC1: \"ImageByteCount\",\n        0xBCC2: \"AlphaOffset\",\n        0xBCC3: \"AlphaByteCount\",\n        0xBCC4: \"ImageDataDiscard\",\n        0xBCC5: \"AlphaDataDiscard\",\n        0xC427: \"OceScanjobDesc\",\n        0xC428: \"OceApplicationSelector\",\n        0xC429: \"OceIDNumber\",\n        0xC42A: \"OceImageLogic\",\n        0xC44F: \"Annotations\",\n        0xC4A5: \"PrintIM\",\n        0xC580: \"USPTOOriginalContentType\",\n        0xC612: \"DNGVersion\",\n        0xC613: \"DNGBackwardVersion\",\n        0xC614: \"UniqueCameraModel\",\n        0xC615: \"LocalizedCameraModel\",\n        0xC616: \"CFAPlaneColor\",\n        0xC617: \"CFALayout\",\n        0xC618: \"LinearizationTable\",\n        0xC619: \"BlackLevelRepeatDim\",\n        0xC61A: \"BlackLevel\",\n        0xC61B: \"BlackLevelDeltaH\",\n        0xC61C: \"BlackLevelDeltaV\",\n        0xC61D: \"WhiteLevel\",\n        0xC61E: \"DefaultScale\",\n        0xC61F: \"DefaultCropOrigin\",\n        0xC620: \"DefaultCropSize\",\n        0xC621: \"ColorMatrix1\",\n        0xC622: \"ColorMatrix2\",\n        0xC623: \"CameraCalibration1\",\n        0xC624: \"CameraCalibration2\",\n        0xC625: \"ReductionMatrix1\",\n        0xC626: \"ReductionMatrix2\",\n        0xC627: \"AnalogBalance\",\n        0xC628: \"AsShotNeutral\",\n        0xC629: \"AsShotWhiteXY\",\n        0xC62A: \"BaselineExposure\",\n        0xC62B: \"BaselineNoise\",\n        0xC62C: \"BaselineSharpness\",\n        0xC62D: \"BayerGreenSplit\",\n        0xC62E: \"LinearResponseLimit\",\n        0xC62F: \"CameraSerialNumber\",\n        0xC630: \"DNGLensInfo\",\n        0xC631: \"ChromaBlurRadius\",\n        0xC632: \"AntiAliasStrength\",\n        0xC633: \"ShadowScale\",\n        0xC634: \"DNGPrivateData\",\n        0xC635: \"MakerNoteSafety\",\n        0xC640: \"RawImageSegmentation\",\n        0xC65A: \"CalibrationIlluminant1\",\n        0xC65B: \"CalibrationIlluminant2\",\n        0xC65C: \"BestQualityScale\",\n        0xC65D: \"RawDataUniqueID\",\n        0xC660: \"AliasLayerMetadata\",\n        0xC68B: \"OriginalRawFileName\",\n        0xC68C: \"OriginalRawFileData\",\n        0xC68D: \"ActiveArea\",\n        0xC68E: \"MaskedAreas\",\n        0xC68F: \"AsShotICCProfile\",\n        0xC690: \"AsShotPreProfileMatrix\",\n        0xC691: \"CurrentICCProfile\",\n        0xC692: \"CurrentPreProfileMatrix\",\n        0xC6BF: \"ColorimetricReference\",\n        0xC6D2: \"PanasonicTitle\",\n        0xC6D3: \"PanasonicTitle2\",\n        0xC6F3: \"CameraCalibrationSig\",\n        0xC6F4: \"ProfileCalibrationSig\",\n        0xC6F5: \"ProfileIFD\",\n        0xC6F6: \"AsShotProfileName\",\n        0xC6F7: \"NoiseReductionApplied\",\n        0xC6F8: \"ProfileName\",\n        0xC6F9: \"ProfileHueSatMapDims\",\n        0xC6FA: \"ProfileHueSatMapData1\",\n        0xC6FB: \"ProfileHueSatMapData2\",\n        0xC6FC: \"ProfileToneCurve\",\n        0xC6FD: \"ProfileEmbedPolicy\",\n        0xC6FE: \"ProfileCopyright\",\n        0xC714: \"ForwardMatrix1\",\n        0xC715: \"ForwardMatrix2\",\n        0xC716: \"PreviewApplicationName\",\n        0xC717: \"PreviewApplicationVersion\",\n        0xC718: \"PreviewSettingsName\",\n        0xC719: \"PreviewSettingsDigest\",\n        0xC71A: \"PreviewColorSpace\",\n        0xC71B: \"PreviewDateTime\",\n        0xC71C: \"RawImageDigest\",\n        0xC71D: \"OriginalRawFileDigest\",\n        0xC71E: \"SubTileBlockSize\",\n        0xC71F: \"RowInterleaveFactor\",\n        0xC725: \"ProfileLookTableDims\",\n        0xC726: \"ProfileLookTableData\",\n        0xC740: \"OpcodeList1\",\n        0xC741: \"OpcodeList2\",\n        0xC74E: \"OpcodeList3\",\n        0xC761: \"NoiseProfile\",\n        0xC763: \"TimeCodes\",\n        0xC764: \"FrameRate\",\n        0xC772: \"TStop\",\n        0xC789: \"ReelName\",\n        0xC791: \"OriginalDefaultFinalSize\",\n        0xC792: \"OriginalBestQualitySize\",\n        0xC793: \"OriginalDefaultCropSize\",\n        0xC7A1: \"CameraLabel\",\n        0xC7A3: \"ProfileHueSatMapEncoding\",\n        0xC7A4: \"ProfileLookTableEncoding\",\n        0xC7A5: \"BaselineExposureOffset\",\n        0xC7A6: \"DefaultBlackRender\",\n        0xC7A7: \"NewRawImageDigest\",\n        0xC7A8: \"RawToPreviewGain\",\n        0xC7B5: \"DefaultUserCrop\",\n        0xEA1C: \"Padding\",\n        0xEA1D: \"OffsetSchema\",\n        0xFDE8: \"OwnerName\",\n        0xFDE9: \"SerialNumber\",\n        0xFDEA: \"Lens\",\n        0xFE00: \"KDC_IFD\",\n        0xFE4C: \"RawFile\",\n        0xFE4D: \"Converter\",\n        0xFE4E: \"WhiteBalance\",\n        0xFE51: \"Exposure\",\n        0xFE52: \"Shadows\",\n        0xFE53: \"Brightness\",\n        0xFE54: \"Contrast\",\n        0xFE55: \"Saturation\",\n        0xFE56: \"Sharpness\",\n        0xFE57: \"Smoothness\",\n        0xFE58: \"MoireFilter\"\n    },\n    gps: {\n        0x0000: \"GPSVersionID\",\n        0x0001: \"GPSLatitudeRef\",\n        0x0002: \"GPSLatitude\",\n        0x0003: \"GPSLongitudeRef\",\n        0x0004: \"GPSLongitude\",\n        0x0005: \"GPSAltitudeRef\",\n        0x0006: \"GPSAltitude\",\n        0x0007: \"GPSTimeStamp\",\n        0x0008: \"GPSSatellites\",\n        0x0009: \"GPSStatus\",\n        0x000A: \"GPSMeasureMode\",\n        0x000B: \"GPSDOP\",\n        0x000C: \"GPSSpeedRef\",\n        0x000D: \"GPSSpeed\",\n        0x000E: \"GPSTrackRef\",\n        0x000F: \"GPSTrack\",\n        0x0010: \"GPSImgDirectionRef\",\n        0x0011: \"GPSImgDirection\",\n        0x0012: \"GPSMapDatum\",\n        0x0013: \"GPSDestLatitudeRef\",\n        0x0014: \"GPSDestLatitude\",\n        0x0015: \"GPSDestLongitudeRef\",\n        0x0016: \"GPSDestLongitude\",\n        0x0017: \"GPSDestBearingRef\",\n        0x0018: \"GPSDestBearing\",\n        0x0019: \"GPSDestDistanceRef\",\n        0x001A: \"GPSDestDistance\",\n        0x001B: \"GPSProcessingMethod\",\n        0x001C: \"GPSAreaInformation\",\n        0x001D: \"GPSDateStamp\",\n        0x001E: \"GPSDifferential\",\n        0x001F: \"GPSHPositioningError\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TRE9yZ2FuaXplci8uL25vZGVfbW9kdWxlcy9leGlmLXBhcnNlci9saWIvZXhpZi10YWdzLmpzPzhiYjMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG5cdGV4aWYgOiB7XG5cdFx0MHgwMDAxIDogXCJJbnRlcm9wSW5kZXhcIixcblx0XHQweDAwMDIgOiBcIkludGVyb3BWZXJzaW9uXCIsXG5cdFx0MHgwMDBCIDogXCJQcm9jZXNzaW5nU29mdHdhcmVcIixcblx0XHQweDAwRkUgOiBcIlN1YmZpbGVUeXBlXCIsXG5cdFx0MHgwMEZGIDogXCJPbGRTdWJmaWxlVHlwZVwiLFxuXHRcdDB4MDEwMCA6IFwiSW1hZ2VXaWR0aFwiLFxuXHRcdDB4MDEwMSA6IFwiSW1hZ2VIZWlnaHRcIixcblx0XHQweDAxMDIgOiBcIkJpdHNQZXJTYW1wbGVcIixcblx0XHQweDAxMDMgOiBcIkNvbXByZXNzaW9uXCIsXG5cdFx0MHgwMTA2IDogXCJQaG90b21ldHJpY0ludGVycHJldGF0aW9uXCIsXG5cdFx0MHgwMTA3IDogXCJUaHJlc2hvbGRpbmdcIixcblx0XHQweDAxMDggOiBcIkNlbGxXaWR0aFwiLFxuXHRcdDB4MDEwOSA6IFwiQ2VsbExlbmd0aFwiLFxuXHRcdDB4MDEwQSA6IFwiRmlsbE9yZGVyXCIsXG5cdFx0MHgwMTBEIDogXCJEb2N1bWVudE5hbWVcIixcblx0XHQweDAxMEUgOiBcIkltYWdlRGVzY3JpcHRpb25cIixcblx0XHQweDAxMEYgOiBcIk1ha2VcIixcblx0XHQweDAxMTAgOiBcIk1vZGVsXCIsXG5cdFx0MHgwMTExIDogXCJTdHJpcE9mZnNldHNcIixcblx0XHQweDAxMTIgOiBcIk9yaWVudGF0aW9uXCIsXG5cdFx0MHgwMTE1IDogXCJTYW1wbGVzUGVyUGl4ZWxcIixcblx0XHQweDAxMTYgOiBcIlJvd3NQZXJTdHJpcFwiLFxuXHRcdDB4MDExNyA6IFwiU3RyaXBCeXRlQ291bnRzXCIsXG5cdFx0MHgwMTE4IDogXCJNaW5TYW1wbGVWYWx1ZVwiLFxuXHRcdDB4MDExOSA6IFwiTWF4U2FtcGxlVmFsdWVcIixcblx0XHQweDAxMUEgOiBcIlhSZXNvbHV0aW9uXCIsXG5cdFx0MHgwMTFCIDogXCJZUmVzb2x1dGlvblwiLFxuXHRcdDB4MDExQyA6IFwiUGxhbmFyQ29uZmlndXJhdGlvblwiLFxuXHRcdDB4MDExRCA6IFwiUGFnZU5hbWVcIixcblx0XHQweDAxMUUgOiBcIlhQb3NpdGlvblwiLFxuXHRcdDB4MDExRiA6IFwiWVBvc2l0aW9uXCIsXG5cdFx0MHgwMTIwIDogXCJGcmVlT2Zmc2V0c1wiLFxuXHRcdDB4MDEyMSA6IFwiRnJlZUJ5dGVDb3VudHNcIixcblx0XHQweDAxMjIgOiBcIkdyYXlSZXNwb25zZVVuaXRcIixcblx0XHQweDAxMjMgOiBcIkdyYXlSZXNwb25zZUN1cnZlXCIsXG5cdFx0MHgwMTI0IDogXCJUNE9wdGlvbnNcIixcblx0XHQweDAxMjUgOiBcIlQ2T3B0aW9uc1wiLFxuXHRcdDB4MDEyOCA6IFwiUmVzb2x1dGlvblVuaXRcIixcblx0XHQweDAxMjkgOiBcIlBhZ2VOdW1iZXJcIixcblx0XHQweDAxMkMgOiBcIkNvbG9yUmVzcG9uc2VVbml0XCIsXG5cdFx0MHgwMTJEIDogXCJUcmFuc2ZlckZ1bmN0aW9uXCIsXG5cdFx0MHgwMTMxIDogXCJTb2Z0d2FyZVwiLFxuXHRcdDB4MDEzMiA6IFwiTW9kaWZ5RGF0ZVwiLFxuXHRcdDB4MDEzQiA6IFwiQXJ0aXN0XCIsXG5cdFx0MHgwMTNDIDogXCJIb3N0Q29tcHV0ZXJcIixcblx0XHQweDAxM0QgOiBcIlByZWRpY3RvclwiLFxuXHRcdDB4MDEzRSA6IFwiV2hpdGVQb2ludFwiLFxuXHRcdDB4MDEzRiA6IFwiUHJpbWFyeUNocm9tYXRpY2l0aWVzXCIsXG5cdFx0MHgwMTQwIDogXCJDb2xvck1hcFwiLFxuXHRcdDB4MDE0MSA6IFwiSGFsZnRvbmVIaW50c1wiLFxuXHRcdDB4MDE0MiA6IFwiVGlsZVdpZHRoXCIsXG5cdFx0MHgwMTQzIDogXCJUaWxlTGVuZ3RoXCIsXG5cdFx0MHgwMTQ0IDogXCJUaWxlT2Zmc2V0c1wiLFxuXHRcdDB4MDE0NSA6IFwiVGlsZUJ5dGVDb3VudHNcIixcblx0XHQweDAxNDYgOiBcIkJhZEZheExpbmVzXCIsXG5cdFx0MHgwMTQ3IDogXCJDbGVhbkZheERhdGFcIixcblx0XHQweDAxNDggOiBcIkNvbnNlY3V0aXZlQmFkRmF4TGluZXNcIixcblx0XHQweDAxNEEgOiBcIlN1YklGRFwiLFxuXHRcdDB4MDE0QyA6IFwiSW5rU2V0XCIsXG5cdFx0MHgwMTREIDogXCJJbmtOYW1lc1wiLFxuXHRcdDB4MDE0RSA6IFwiTnVtYmVyb2ZJbmtzXCIsXG5cdFx0MHgwMTUwIDogXCJEb3RSYW5nZVwiLFxuXHRcdDB4MDE1MSA6IFwiVGFyZ2V0UHJpbnRlclwiLFxuXHRcdDB4MDE1MiA6IFwiRXh0cmFTYW1wbGVzXCIsXG5cdFx0MHgwMTUzIDogXCJTYW1wbGVGb3JtYXRcIixcblx0XHQweDAxNTQgOiBcIlNNaW5TYW1wbGVWYWx1ZVwiLFxuXHRcdDB4MDE1NSA6IFwiU01heFNhbXBsZVZhbHVlXCIsXG5cdFx0MHgwMTU2IDogXCJUcmFuc2ZlclJhbmdlXCIsXG5cdFx0MHgwMTU3IDogXCJDbGlwUGF0aFwiLFxuXHRcdDB4MDE1OCA6IFwiWENsaXBQYXRoVW5pdHNcIixcblx0XHQweDAxNTkgOiBcIllDbGlwUGF0aFVuaXRzXCIsXG5cdFx0MHgwMTVBIDogXCJJbmRleGVkXCIsXG5cdFx0MHgwMTVCIDogXCJKUEVHVGFibGVzXCIsXG5cdFx0MHgwMTVGIDogXCJPUElQcm94eVwiLFxuXHRcdDB4MDE5MCA6IFwiR2xvYmFsUGFyYW1ldGVyc0lGRFwiLFxuXHRcdDB4MDE5MSA6IFwiUHJvZmlsZVR5cGVcIixcblx0XHQweDAxOTIgOiBcIkZheFByb2ZpbGVcIixcblx0XHQweDAxOTMgOiBcIkNvZGluZ01ldGhvZHNcIixcblx0XHQweDAxOTQgOiBcIlZlcnNpb25ZZWFyXCIsXG5cdFx0MHgwMTk1IDogXCJNb2RlTnVtYmVyXCIsXG5cdFx0MHgwMUIxIDogXCJEZWNvZGVcIixcblx0XHQweDAxQjIgOiBcIkRlZmF1bHRJbWFnZUNvbG9yXCIsXG5cdFx0MHgwMUIzIDogXCJUODJPcHRpb25zXCIsXG5cdFx0MHgwMUI1IDogXCJKUEVHVGFibGVzXCIsXG5cdFx0MHgwMjAwIDogXCJKUEVHUHJvY1wiLFxuXHRcdDB4MDIwMSA6IFwiVGh1bWJuYWlsT2Zmc2V0XCIsXG5cdFx0MHgwMjAyIDogXCJUaHVtYm5haWxMZW5ndGhcIixcblx0XHQweDAyMDMgOiBcIkpQRUdSZXN0YXJ0SW50ZXJ2YWxcIixcblx0XHQweDAyMDUgOiBcIkpQRUdMb3NzbGVzc1ByZWRpY3RvcnNcIixcblx0XHQweDAyMDYgOiBcIkpQRUdQb2ludFRyYW5zZm9ybXNcIixcblx0XHQweDAyMDcgOiBcIkpQRUdRVGFibGVzXCIsXG5cdFx0MHgwMjA4IDogXCJKUEVHRENUYWJsZXNcIixcblx0XHQweDAyMDkgOiBcIkpQRUdBQ1RhYmxlc1wiLFxuXHRcdDB4MDIxMSA6IFwiWUNiQ3JDb2VmZmljaWVudHNcIixcblx0XHQweDAyMTIgOiBcIllDYkNyU3ViU2FtcGxpbmdcIixcblx0XHQweDAyMTMgOiBcIllDYkNyUG9zaXRpb25pbmdcIixcblx0XHQweDAyMTQgOiBcIlJlZmVyZW5jZUJsYWNrV2hpdGVcIixcblx0XHQweDAyMkYgOiBcIlN0cmlwUm93Q291bnRzXCIsXG5cdFx0MHgwMkJDIDogXCJBcHBsaWNhdGlvbk5vdGVzXCIsXG5cdFx0MHgwM0U3IDogXCJVU1BUT01pc2NlbGxhbmVvdXNcIixcblx0XHQweDEwMDAgOiBcIlJlbGF0ZWRJbWFnZUZpbGVGb3JtYXRcIixcblx0XHQweDEwMDEgOiBcIlJlbGF0ZWRJbWFnZVdpZHRoXCIsXG5cdFx0MHgxMDAyIDogXCJSZWxhdGVkSW1hZ2VIZWlnaHRcIixcblx0XHQweDQ3NDYgOiBcIlJhdGluZ1wiLFxuXHRcdDB4NDc0NyA6IFwiWFBfRElQX1hNTFwiLFxuXHRcdDB4NDc0OCA6IFwiU3RpdGNoSW5mb1wiLFxuXHRcdDB4NDc0OSA6IFwiUmF0aW5nUGVyY2VudFwiLFxuXHRcdDB4ODAwRCA6IFwiSW1hZ2VJRFwiLFxuXHRcdDB4ODBBMyA6IFwiV2FuZ1RhZzFcIixcblx0XHQweDgwQTQgOiBcIldhbmdBbm5vdGF0aW9uXCIsXG5cdFx0MHg4MEE1IDogXCJXYW5nVGFnM1wiLFxuXHRcdDB4ODBBNiA6IFwiV2FuZ1RhZzRcIixcblx0XHQweDgwRTMgOiBcIk1hdHRlaW5nXCIsXG5cdFx0MHg4MEU0IDogXCJEYXRhVHlwZVwiLFxuXHRcdDB4ODBFNSA6IFwiSW1hZ2VEZXB0aFwiLFxuXHRcdDB4ODBFNiA6IFwiVGlsZURlcHRoXCIsXG5cdFx0MHg4MjdEIDogXCJNb2RlbDJcIixcblx0XHQweDgyOEQgOiBcIkNGQVJlcGVhdFBhdHRlcm5EaW1cIixcblx0XHQweDgyOEUgOiBcIkNGQVBhdHRlcm4yXCIsXG5cdFx0MHg4MjhGIDogXCJCYXR0ZXJ5TGV2ZWxcIixcblx0XHQweDgyOTAgOiBcIktvZGFrSUZEXCIsXG5cdFx0MHg4Mjk4IDogXCJDb3B5cmlnaHRcIixcblx0XHQweDgyOUEgOiBcIkV4cG9zdXJlVGltZVwiLFxuXHRcdDB4ODI5RCA6IFwiRk51bWJlclwiLFxuXHRcdDB4ODJBNSA6IFwiTURGaWxlVGFnXCIsXG5cdFx0MHg4MkE2IDogXCJNRFNjYWxlUGl4ZWxcIixcblx0XHQweDgyQTcgOiBcIk1EQ29sb3JUYWJsZVwiLFxuXHRcdDB4ODJBOCA6IFwiTURMYWJOYW1lXCIsXG5cdFx0MHg4MkE5IDogXCJNRFNhbXBsZUluZm9cIixcblx0XHQweDgyQUEgOiBcIk1EUHJlcERhdGVcIixcblx0XHQweDgyQUIgOiBcIk1EUHJlcFRpbWVcIixcblx0XHQweDgyQUMgOiBcIk1ERmlsZVVuaXRzXCIsXG5cdFx0MHg4MzBFIDogXCJQaXhlbFNjYWxlXCIsXG5cdFx0MHg4MzM1IDogXCJBZHZlbnRTY2FsZVwiLFxuXHRcdDB4ODMzNiA6IFwiQWR2ZW50UmV2aXNpb25cIixcblx0XHQweDgzNUMgOiBcIlVJQzFUYWdcIixcblx0XHQweDgzNUQgOiBcIlVJQzJUYWdcIixcblx0XHQweDgzNUUgOiBcIlVJQzNUYWdcIixcblx0XHQweDgzNUYgOiBcIlVJQzRUYWdcIixcblx0XHQweDgzQkIgOiBcIklQVEMtTkFBXCIsXG5cdFx0MHg4NDdFIDogXCJJbnRlcmdyYXBoUGFja2V0RGF0YVwiLFxuXHRcdDB4ODQ3RiA6IFwiSW50ZXJncmFwaEZsYWdSZWdpc3RlcnNcIixcblx0XHQweDg0ODAgOiBcIkludGVyZ3JhcGhNYXRyaXhcIixcblx0XHQweDg0ODEgOiBcIklOR1JSZXNlcnZlZFwiLFxuXHRcdDB4ODQ4MiA6IFwiTW9kZWxUaWVQb2ludFwiLFxuXHRcdDB4ODRFMCA6IFwiU2l0ZVwiLFxuXHRcdDB4ODRFMSA6IFwiQ29sb3JTZXF1ZW5jZVwiLFxuXHRcdDB4ODRFMiA6IFwiSVQ4SGVhZGVyXCIsXG5cdFx0MHg4NEUzIDogXCJSYXN0ZXJQYWRkaW5nXCIsXG5cdFx0MHg4NEU0IDogXCJCaXRzUGVyUnVuTGVuZ3RoXCIsXG5cdFx0MHg4NEU1IDogXCJCaXRzUGVyRXh0ZW5kZWRSdW5MZW5ndGhcIixcblx0XHQweDg0RTYgOiBcIkNvbG9yVGFibGVcIixcblx0XHQweDg0RTcgOiBcIkltYWdlQ29sb3JJbmRpY2F0b3JcIixcblx0XHQweDg0RTggOiBcIkJhY2tncm91bmRDb2xvckluZGljYXRvclwiLFxuXHRcdDB4ODRFOSA6IFwiSW1hZ2VDb2xvclZhbHVlXCIsXG5cdFx0MHg4NEVBIDogXCJCYWNrZ3JvdW5kQ29sb3JWYWx1ZVwiLFxuXHRcdDB4ODRFQiA6IFwiUGl4ZWxJbnRlbnNpdHlSYW5nZVwiLFxuXHRcdDB4ODRFQyA6IFwiVHJhbnNwYXJlbmN5SW5kaWNhdG9yXCIsXG5cdFx0MHg4NEVEIDogXCJDb2xvckNoYXJhY3Rlcml6YXRpb25cIixcblx0XHQweDg0RUUgOiBcIkhDVXNhZ2VcIixcblx0XHQweDg0RUYgOiBcIlRyYXBJbmRpY2F0b3JcIixcblx0XHQweDg0RjAgOiBcIkNNWUtFcXVpdmFsZW50XCIsXG5cdFx0MHg4NTQ2IDogXCJTRU1JbmZvXCIsXG5cdFx0MHg4NTY4IDogXCJBRkNQX0lQVENcIixcblx0XHQweDg1QjggOiBcIlBpeGVsTWFnaWNKQklHT3B0aW9uc1wiLFxuXHRcdDB4ODVEOCA6IFwiTW9kZWxUcmFuc2Zvcm1cIixcblx0XHQweDg2MDIgOiBcIldCX0dSR0JMZXZlbHNcIixcblx0XHQweDg2MDYgOiBcIkxlYWZEYXRhXCIsXG5cdFx0MHg4NjQ5IDogXCJQaG90b3Nob3BTZXR0aW5nc1wiLFxuXHRcdDB4ODc2OSA6IFwiRXhpZk9mZnNldFwiLFxuXHRcdDB4ODc3MyA6IFwiSUNDX1Byb2ZpbGVcIixcblx0XHQweDg3N0YgOiBcIlRJRkZfRlhFeHRlbnNpb25zXCIsXG5cdFx0MHg4NzgwIDogXCJNdWx0aVByb2ZpbGVzXCIsXG5cdFx0MHg4NzgxIDogXCJTaGFyZWREYXRhXCIsXG5cdFx0MHg4NzgyIDogXCJUODhPcHRpb25zXCIsXG5cdFx0MHg4N0FDIDogXCJJbWFnZUxheWVyXCIsXG5cdFx0MHg4N0FGIDogXCJHZW9UaWZmRGlyZWN0b3J5XCIsXG5cdFx0MHg4N0IwIDogXCJHZW9UaWZmRG91YmxlUGFyYW1zXCIsXG5cdFx0MHg4N0IxIDogXCJHZW9UaWZmQXNjaWlQYXJhbXNcIixcblx0XHQweDg4MjIgOiBcIkV4cG9zdXJlUHJvZ3JhbVwiLFxuXHRcdDB4ODgyNCA6IFwiU3BlY3RyYWxTZW5zaXRpdml0eVwiLFxuXHRcdDB4ODgyNSA6IFwiR1BTSW5mb1wiLFxuXHRcdDB4ODgyNyA6IFwiSVNPXCIsXG5cdFx0MHg4ODI4IDogXCJPcHRvLUVsZWN0cmljQ29udkZhY3RvclwiLFxuXHRcdDB4ODgyOSA6IFwiSW50ZXJsYWNlXCIsXG5cdFx0MHg4ODJBIDogXCJUaW1lWm9uZU9mZnNldFwiLFxuXHRcdDB4ODgyQiA6IFwiU2VsZlRpbWVyTW9kZVwiLFxuXHRcdDB4ODgzMCA6IFwiU2Vuc2l0aXZpdHlUeXBlXCIsXG5cdFx0MHg4ODMxIDogXCJTdGFuZGFyZE91dHB1dFNlbnNpdGl2aXR5XCIsXG5cdFx0MHg4ODMyIDogXCJSZWNvbW1lbmRlZEV4cG9zdXJlSW5kZXhcIixcblx0XHQweDg4MzMgOiBcIklTT1NwZWVkXCIsXG5cdFx0MHg4ODM0IDogXCJJU09TcGVlZExhdGl0dWRleXl5XCIsXG5cdFx0MHg4ODM1IDogXCJJU09TcGVlZExhdGl0dWRlenp6XCIsXG5cdFx0MHg4ODVDIDogXCJGYXhSZWN2UGFyYW1zXCIsXG5cdFx0MHg4ODVEIDogXCJGYXhTdWJBZGRyZXNzXCIsXG5cdFx0MHg4ODVFIDogXCJGYXhSZWN2VGltZVwiLFxuXHRcdDB4ODg4QSA6IFwiTGVhZlN1YklGRFwiLFxuXHRcdDB4OTAwMCA6IFwiRXhpZlZlcnNpb25cIixcblx0XHQweDkwMDMgOiBcIkRhdGVUaW1lT3JpZ2luYWxcIixcblx0XHQweDkwMDQgOiBcIkNyZWF0ZURhdGVcIixcblx0XHQweDkxMDEgOiBcIkNvbXBvbmVudHNDb25maWd1cmF0aW9uXCIsXG5cdFx0MHg5MTAyIDogXCJDb21wcmVzc2VkQml0c1BlclBpeGVsXCIsXG5cdFx0MHg5MjAxIDogXCJTaHV0dGVyU3BlZWRWYWx1ZVwiLFxuXHRcdDB4OTIwMiA6IFwiQXBlcnR1cmVWYWx1ZVwiLFxuXHRcdDB4OTIwMyA6IFwiQnJpZ2h0bmVzc1ZhbHVlXCIsXG5cdFx0MHg5MjA0IDogXCJFeHBvc3VyZUNvbXBlbnNhdGlvblwiLFxuXHRcdDB4OTIwNSA6IFwiTWF4QXBlcnR1cmVWYWx1ZVwiLFxuXHRcdDB4OTIwNiA6IFwiU3ViamVjdERpc3RhbmNlXCIsXG5cdFx0MHg5MjA3IDogXCJNZXRlcmluZ01vZGVcIixcblx0XHQweDkyMDggOiBcIkxpZ2h0U291cmNlXCIsXG5cdFx0MHg5MjA5IDogXCJGbGFzaFwiLFxuXHRcdDB4OTIwQSA6IFwiRm9jYWxMZW5ndGhcIixcblx0XHQweDkyMEIgOiBcIkZsYXNoRW5lcmd5XCIsXG5cdFx0MHg5MjBDIDogXCJTcGF0aWFsRnJlcXVlbmN5UmVzcG9uc2VcIixcblx0XHQweDkyMEQgOiBcIk5vaXNlXCIsXG5cdFx0MHg5MjBFIDogXCJGb2NhbFBsYW5lWFJlc29sdXRpb25cIixcblx0XHQweDkyMEYgOiBcIkZvY2FsUGxhbmVZUmVzb2x1dGlvblwiLFxuXHRcdDB4OTIxMCA6IFwiRm9jYWxQbGFuZVJlc29sdXRpb25Vbml0XCIsXG5cdFx0MHg5MjExIDogXCJJbWFnZU51bWJlclwiLFxuXHRcdDB4OTIxMiA6IFwiU2VjdXJpdHlDbGFzc2lmaWNhdGlvblwiLFxuXHRcdDB4OTIxMyA6IFwiSW1hZ2VIaXN0b3J5XCIsXG5cdFx0MHg5MjE0IDogXCJTdWJqZWN0QXJlYVwiLFxuXHRcdDB4OTIxNSA6IFwiRXhwb3N1cmVJbmRleFwiLFxuXHRcdDB4OTIxNiA6IFwiVElGRi1FUFN0YW5kYXJkSURcIixcblx0XHQweDkyMTcgOiBcIlNlbnNpbmdNZXRob2RcIixcblx0XHQweDkyM0EgOiBcIkNJUDNEYXRhRmlsZVwiLFxuXHRcdDB4OTIzQiA6IFwiQ0lQM1NoZWV0XCIsXG5cdFx0MHg5MjNDIDogXCJDSVAzU2lkZVwiLFxuXHRcdDB4OTIzRiA6IFwiU3RvTml0c1wiLFxuXHRcdDB4OTI3QyA6IFwiTWFrZXJOb3RlXCIsXG5cdFx0MHg5Mjg2IDogXCJVc2VyQ29tbWVudFwiLFxuXHRcdDB4OTI5MCA6IFwiU3ViU2VjVGltZVwiLFxuXHRcdDB4OTI5MSA6IFwiU3ViU2VjVGltZU9yaWdpbmFsXCIsXG5cdFx0MHg5MjkyIDogXCJTdWJTZWNUaW1lRGlnaXRpemVkXCIsXG5cdFx0MHg5MzJGIDogXCJNU0RvY3VtZW50VGV4dFwiLFxuXHRcdDB4OTMzMCA6IFwiTVNQcm9wZXJ0eVNldFN0b3JhZ2VcIixcblx0XHQweDkzMzEgOiBcIk1TRG9jdW1lbnRUZXh0UG9zaXRpb25cIixcblx0XHQweDkzNUMgOiBcIkltYWdlU291cmNlRGF0YVwiLFxuXHRcdDB4OUM5QiA6IFwiWFBUaXRsZVwiLFxuXHRcdDB4OUM5QyA6IFwiWFBDb21tZW50XCIsXG5cdFx0MHg5QzlEIDogXCJYUEF1dGhvclwiLFxuXHRcdDB4OUM5RSA6IFwiWFBLZXl3b3Jkc1wiLFxuXHRcdDB4OUM5RiA6IFwiWFBTdWJqZWN0XCIsXG5cdFx0MHhBMDAwIDogXCJGbGFzaHBpeFZlcnNpb25cIixcblx0XHQweEEwMDEgOiBcIkNvbG9yU3BhY2VcIixcblx0XHQweEEwMDIgOiBcIkV4aWZJbWFnZVdpZHRoXCIsXG5cdFx0MHhBMDAzIDogXCJFeGlmSW1hZ2VIZWlnaHRcIixcblx0XHQweEEwMDQgOiBcIlJlbGF0ZWRTb3VuZEZpbGVcIixcblx0XHQweEEwMDUgOiBcIkludGVyb3BPZmZzZXRcIixcblx0XHQweEEyMEIgOiBcIkZsYXNoRW5lcmd5XCIsXG5cdFx0MHhBMjBDIDogXCJTcGF0aWFsRnJlcXVlbmN5UmVzcG9uc2VcIixcblx0XHQweEEyMEQgOiBcIk5vaXNlXCIsXG5cdFx0MHhBMjBFIDogXCJGb2NhbFBsYW5lWFJlc29sdXRpb25cIixcblx0XHQweEEyMEYgOiBcIkZvY2FsUGxhbmVZUmVzb2x1dGlvblwiLFxuXHRcdDB4QTIxMCA6IFwiRm9jYWxQbGFuZVJlc29sdXRpb25Vbml0XCIsXG5cdFx0MHhBMjExIDogXCJJbWFnZU51bWJlclwiLFxuXHRcdDB4QTIxMiA6IFwiU2VjdXJpdHlDbGFzc2lmaWNhdGlvblwiLFxuXHRcdDB4QTIxMyA6IFwiSW1hZ2VIaXN0b3J5XCIsXG5cdFx0MHhBMjE0IDogXCJTdWJqZWN0TG9jYXRpb25cIixcblx0XHQweEEyMTUgOiBcIkV4cG9zdXJlSW5kZXhcIixcblx0XHQweEEyMTYgOiBcIlRJRkYtRVBTdGFuZGFyZElEXCIsXG5cdFx0MHhBMjE3IDogXCJTZW5zaW5nTWV0aG9kXCIsXG5cdFx0MHhBMzAwIDogXCJGaWxlU291cmNlXCIsXG5cdFx0MHhBMzAxIDogXCJTY2VuZVR5cGVcIixcblx0XHQweEEzMDIgOiBcIkNGQVBhdHRlcm5cIixcblx0XHQweEE0MDEgOiBcIkN1c3RvbVJlbmRlcmVkXCIsXG5cdFx0MHhBNDAyIDogXCJFeHBvc3VyZU1vZGVcIixcblx0XHQweEE0MDMgOiBcIldoaXRlQmFsYW5jZVwiLFxuXHRcdDB4QTQwNCA6IFwiRGlnaXRhbFpvb21SYXRpb1wiLFxuXHRcdDB4QTQwNSA6IFwiRm9jYWxMZW5ndGhJbjM1bW1Gb3JtYXRcIixcblx0XHQweEE0MDYgOiBcIlNjZW5lQ2FwdHVyZVR5cGVcIixcblx0XHQweEE0MDcgOiBcIkdhaW5Db250cm9sXCIsXG5cdFx0MHhBNDA4IDogXCJDb250cmFzdFwiLFxuXHRcdDB4QTQwOSA6IFwiU2F0dXJhdGlvblwiLFxuXHRcdDB4QTQwQSA6IFwiU2hhcnBuZXNzXCIsXG5cdFx0MHhBNDBCIDogXCJEZXZpY2VTZXR0aW5nRGVzY3JpcHRpb25cIixcblx0XHQweEE0MEMgOiBcIlN1YmplY3REaXN0YW5jZVJhbmdlXCIsXG5cdFx0MHhBNDIwIDogXCJJbWFnZVVuaXF1ZUlEXCIsXG5cdFx0MHhBNDMwIDogXCJPd25lck5hbWVcIixcblx0XHQweEE0MzEgOiBcIlNlcmlhbE51bWJlclwiLFxuXHRcdDB4QTQzMiA6IFwiTGVuc0luZm9cIixcblx0XHQweEE0MzMgOiBcIkxlbnNNYWtlXCIsXG5cdFx0MHhBNDM0IDogXCJMZW5zTW9kZWxcIixcblx0XHQweEE0MzUgOiBcIkxlbnNTZXJpYWxOdW1iZXJcIixcblx0XHQweEE0ODAgOiBcIkdEQUxNZXRhZGF0YVwiLFxuXHRcdDB4QTQ4MSA6IFwiR0RBTE5vRGF0YVwiLFxuXHRcdDB4QTUwMCA6IFwiR2FtbWFcIixcblx0XHQweEFGQzAgOiBcIkV4cGFuZFNvZnR3YXJlXCIsXG5cdFx0MHhBRkMxIDogXCJFeHBhbmRMZW5zXCIsXG5cdFx0MHhBRkMyIDogXCJFeHBhbmRGaWxtXCIsXG5cdFx0MHhBRkMzIDogXCJFeHBhbmRGaWx0ZXJMZW5zXCIsXG5cdFx0MHhBRkM0IDogXCJFeHBhbmRTY2FubmVyXCIsXG5cdFx0MHhBRkM1IDogXCJFeHBhbmRGbGFzaExhbXBcIixcblx0XHQweEJDMDEgOiBcIlBpeGVsRm9ybWF0XCIsXG5cdFx0MHhCQzAyIDogXCJUcmFuc2Zvcm1hdGlvblwiLFxuXHRcdDB4QkMwMyA6IFwiVW5jb21wcmVzc2VkXCIsXG5cdFx0MHhCQzA0IDogXCJJbWFnZVR5cGVcIixcblx0XHQweEJDODAgOiBcIkltYWdlV2lkdGhcIixcblx0XHQweEJDODEgOiBcIkltYWdlSGVpZ2h0XCIsXG5cdFx0MHhCQzgyIDogXCJXaWR0aFJlc29sdXRpb25cIixcblx0XHQweEJDODMgOiBcIkhlaWdodFJlc29sdXRpb25cIixcblx0XHQweEJDQzAgOiBcIkltYWdlT2Zmc2V0XCIsXG5cdFx0MHhCQ0MxIDogXCJJbWFnZUJ5dGVDb3VudFwiLFxuXHRcdDB4QkNDMiA6IFwiQWxwaGFPZmZzZXRcIixcblx0XHQweEJDQzMgOiBcIkFscGhhQnl0ZUNvdW50XCIsXG5cdFx0MHhCQ0M0IDogXCJJbWFnZURhdGFEaXNjYXJkXCIsXG5cdFx0MHhCQ0M1IDogXCJBbHBoYURhdGFEaXNjYXJkXCIsXG5cdFx0MHhDNDI3IDogXCJPY2VTY2Fuam9iRGVzY1wiLFxuXHRcdDB4QzQyOCA6IFwiT2NlQXBwbGljYXRpb25TZWxlY3RvclwiLFxuXHRcdDB4QzQyOSA6IFwiT2NlSUROdW1iZXJcIixcblx0XHQweEM0MkEgOiBcIk9jZUltYWdlTG9naWNcIixcblx0XHQweEM0NEYgOiBcIkFubm90YXRpb25zXCIsXG5cdFx0MHhDNEE1IDogXCJQcmludElNXCIsXG5cdFx0MHhDNTgwIDogXCJVU1BUT09yaWdpbmFsQ29udGVudFR5cGVcIixcblx0XHQweEM2MTIgOiBcIkROR1ZlcnNpb25cIixcblx0XHQweEM2MTMgOiBcIkROR0JhY2t3YXJkVmVyc2lvblwiLFxuXHRcdDB4QzYxNCA6IFwiVW5pcXVlQ2FtZXJhTW9kZWxcIixcblx0XHQweEM2MTUgOiBcIkxvY2FsaXplZENhbWVyYU1vZGVsXCIsXG5cdFx0MHhDNjE2IDogXCJDRkFQbGFuZUNvbG9yXCIsXG5cdFx0MHhDNjE3IDogXCJDRkFMYXlvdXRcIixcblx0XHQweEM2MTggOiBcIkxpbmVhcml6YXRpb25UYWJsZVwiLFxuXHRcdDB4QzYxOSA6IFwiQmxhY2tMZXZlbFJlcGVhdERpbVwiLFxuXHRcdDB4QzYxQSA6IFwiQmxhY2tMZXZlbFwiLFxuXHRcdDB4QzYxQiA6IFwiQmxhY2tMZXZlbERlbHRhSFwiLFxuXHRcdDB4QzYxQyA6IFwiQmxhY2tMZXZlbERlbHRhVlwiLFxuXHRcdDB4QzYxRCA6IFwiV2hpdGVMZXZlbFwiLFxuXHRcdDB4QzYxRSA6IFwiRGVmYXVsdFNjYWxlXCIsXG5cdFx0MHhDNjFGIDogXCJEZWZhdWx0Q3JvcE9yaWdpblwiLFxuXHRcdDB4QzYyMCA6IFwiRGVmYXVsdENyb3BTaXplXCIsXG5cdFx0MHhDNjIxIDogXCJDb2xvck1hdHJpeDFcIixcblx0XHQweEM2MjIgOiBcIkNvbG9yTWF0cml4MlwiLFxuXHRcdDB4QzYyMyA6IFwiQ2FtZXJhQ2FsaWJyYXRpb24xXCIsXG5cdFx0MHhDNjI0IDogXCJDYW1lcmFDYWxpYnJhdGlvbjJcIixcblx0XHQweEM2MjUgOiBcIlJlZHVjdGlvbk1hdHJpeDFcIixcblx0XHQweEM2MjYgOiBcIlJlZHVjdGlvbk1hdHJpeDJcIixcblx0XHQweEM2MjcgOiBcIkFuYWxvZ0JhbGFuY2VcIixcblx0XHQweEM2MjggOiBcIkFzU2hvdE5ldXRyYWxcIixcblx0XHQweEM2MjkgOiBcIkFzU2hvdFdoaXRlWFlcIixcblx0XHQweEM2MkEgOiBcIkJhc2VsaW5lRXhwb3N1cmVcIixcblx0XHQweEM2MkIgOiBcIkJhc2VsaW5lTm9pc2VcIixcblx0XHQweEM2MkMgOiBcIkJhc2VsaW5lU2hhcnBuZXNzXCIsXG5cdFx0MHhDNjJEIDogXCJCYXllckdyZWVuU3BsaXRcIixcblx0XHQweEM2MkUgOiBcIkxpbmVhclJlc3BvbnNlTGltaXRcIixcblx0XHQweEM2MkYgOiBcIkNhbWVyYVNlcmlhbE51bWJlclwiLFxuXHRcdDB4QzYzMCA6IFwiRE5HTGVuc0luZm9cIixcblx0XHQweEM2MzEgOiBcIkNocm9tYUJsdXJSYWRpdXNcIixcblx0XHQweEM2MzIgOiBcIkFudGlBbGlhc1N0cmVuZ3RoXCIsXG5cdFx0MHhDNjMzIDogXCJTaGFkb3dTY2FsZVwiLFxuXHRcdDB4QzYzNCA6IFwiRE5HUHJpdmF0ZURhdGFcIixcblx0XHQweEM2MzUgOiBcIk1ha2VyTm90ZVNhZmV0eVwiLFxuXHRcdDB4QzY0MCA6IFwiUmF3SW1hZ2VTZWdtZW50YXRpb25cIixcblx0XHQweEM2NUEgOiBcIkNhbGlicmF0aW9uSWxsdW1pbmFudDFcIixcblx0XHQweEM2NUIgOiBcIkNhbGlicmF0aW9uSWxsdW1pbmFudDJcIixcblx0XHQweEM2NUMgOiBcIkJlc3RRdWFsaXR5U2NhbGVcIixcblx0XHQweEM2NUQgOiBcIlJhd0RhdGFVbmlxdWVJRFwiLFxuXHRcdDB4QzY2MCA6IFwiQWxpYXNMYXllck1ldGFkYXRhXCIsXG5cdFx0MHhDNjhCIDogXCJPcmlnaW5hbFJhd0ZpbGVOYW1lXCIsXG5cdFx0MHhDNjhDIDogXCJPcmlnaW5hbFJhd0ZpbGVEYXRhXCIsXG5cdFx0MHhDNjhEIDogXCJBY3RpdmVBcmVhXCIsXG5cdFx0MHhDNjhFIDogXCJNYXNrZWRBcmVhc1wiLFxuXHRcdDB4QzY4RiA6IFwiQXNTaG90SUNDUHJvZmlsZVwiLFxuXHRcdDB4QzY5MCA6IFwiQXNTaG90UHJlUHJvZmlsZU1hdHJpeFwiLFxuXHRcdDB4QzY5MSA6IFwiQ3VycmVudElDQ1Byb2ZpbGVcIixcblx0XHQweEM2OTIgOiBcIkN1cnJlbnRQcmVQcm9maWxlTWF0cml4XCIsXG5cdFx0MHhDNkJGIDogXCJDb2xvcmltZXRyaWNSZWZlcmVuY2VcIixcblx0XHQweEM2RDIgOiBcIlBhbmFzb25pY1RpdGxlXCIsXG5cdFx0MHhDNkQzIDogXCJQYW5hc29uaWNUaXRsZTJcIixcblx0XHQweEM2RjMgOiBcIkNhbWVyYUNhbGlicmF0aW9uU2lnXCIsXG5cdFx0MHhDNkY0IDogXCJQcm9maWxlQ2FsaWJyYXRpb25TaWdcIixcblx0XHQweEM2RjUgOiBcIlByb2ZpbGVJRkRcIixcblx0XHQweEM2RjYgOiBcIkFzU2hvdFByb2ZpbGVOYW1lXCIsXG5cdFx0MHhDNkY3IDogXCJOb2lzZVJlZHVjdGlvbkFwcGxpZWRcIixcblx0XHQweEM2RjggOiBcIlByb2ZpbGVOYW1lXCIsXG5cdFx0MHhDNkY5IDogXCJQcm9maWxlSHVlU2F0TWFwRGltc1wiLFxuXHRcdDB4QzZGQSA6IFwiUHJvZmlsZUh1ZVNhdE1hcERhdGExXCIsXG5cdFx0MHhDNkZCIDogXCJQcm9maWxlSHVlU2F0TWFwRGF0YTJcIixcblx0XHQweEM2RkMgOiBcIlByb2ZpbGVUb25lQ3VydmVcIixcblx0XHQweEM2RkQgOiBcIlByb2ZpbGVFbWJlZFBvbGljeVwiLFxuXHRcdDB4QzZGRSA6IFwiUHJvZmlsZUNvcHlyaWdodFwiLFxuXHRcdDB4QzcxNCA6IFwiRm9yd2FyZE1hdHJpeDFcIixcblx0XHQweEM3MTUgOiBcIkZvcndhcmRNYXRyaXgyXCIsXG5cdFx0MHhDNzE2IDogXCJQcmV2aWV3QXBwbGljYXRpb25OYW1lXCIsXG5cdFx0MHhDNzE3IDogXCJQcmV2aWV3QXBwbGljYXRpb25WZXJzaW9uXCIsXG5cdFx0MHhDNzE4IDogXCJQcmV2aWV3U2V0dGluZ3NOYW1lXCIsXG5cdFx0MHhDNzE5IDogXCJQcmV2aWV3U2V0dGluZ3NEaWdlc3RcIixcblx0XHQweEM3MUEgOiBcIlByZXZpZXdDb2xvclNwYWNlXCIsXG5cdFx0MHhDNzFCIDogXCJQcmV2aWV3RGF0ZVRpbWVcIixcblx0XHQweEM3MUMgOiBcIlJhd0ltYWdlRGlnZXN0XCIsXG5cdFx0MHhDNzFEIDogXCJPcmlnaW5hbFJhd0ZpbGVEaWdlc3RcIixcblx0XHQweEM3MUUgOiBcIlN1YlRpbGVCbG9ja1NpemVcIixcblx0XHQweEM3MUYgOiBcIlJvd0ludGVybGVhdmVGYWN0b3JcIixcblx0XHQweEM3MjUgOiBcIlByb2ZpbGVMb29rVGFibGVEaW1zXCIsXG5cdFx0MHhDNzI2IDogXCJQcm9maWxlTG9va1RhYmxlRGF0YVwiLFxuXHRcdDB4Qzc0MCA6IFwiT3Bjb2RlTGlzdDFcIixcblx0XHQweEM3NDEgOiBcIk9wY29kZUxpc3QyXCIsXG5cdFx0MHhDNzRFIDogXCJPcGNvZGVMaXN0M1wiLFxuXHRcdDB4Qzc2MSA6IFwiTm9pc2VQcm9maWxlXCIsXG5cdFx0MHhDNzYzIDogXCJUaW1lQ29kZXNcIixcblx0XHQweEM3NjQgOiBcIkZyYW1lUmF0ZVwiLFxuXHRcdDB4Qzc3MiA6IFwiVFN0b3BcIixcblx0XHQweEM3ODkgOiBcIlJlZWxOYW1lXCIsXG5cdFx0MHhDNzkxIDogXCJPcmlnaW5hbERlZmF1bHRGaW5hbFNpemVcIixcblx0XHQweEM3OTIgOiBcIk9yaWdpbmFsQmVzdFF1YWxpdHlTaXplXCIsXG5cdFx0MHhDNzkzIDogXCJPcmlnaW5hbERlZmF1bHRDcm9wU2l6ZVwiLFxuXHRcdDB4QzdBMSA6IFwiQ2FtZXJhTGFiZWxcIixcblx0XHQweEM3QTMgOiBcIlByb2ZpbGVIdWVTYXRNYXBFbmNvZGluZ1wiLFxuXHRcdDB4QzdBNCA6IFwiUHJvZmlsZUxvb2tUYWJsZUVuY29kaW5nXCIsXG5cdFx0MHhDN0E1IDogXCJCYXNlbGluZUV4cG9zdXJlT2Zmc2V0XCIsXG5cdFx0MHhDN0E2IDogXCJEZWZhdWx0QmxhY2tSZW5kZXJcIixcblx0XHQweEM3QTcgOiBcIk5ld1Jhd0ltYWdlRGlnZXN0XCIsXG5cdFx0MHhDN0E4IDogXCJSYXdUb1ByZXZpZXdHYWluXCIsXG5cdFx0MHhDN0I1IDogXCJEZWZhdWx0VXNlckNyb3BcIixcblx0XHQweEVBMUMgOiBcIlBhZGRpbmdcIixcblx0XHQweEVBMUQgOiBcIk9mZnNldFNjaGVtYVwiLFxuXHRcdDB4RkRFOCA6IFwiT3duZXJOYW1lXCIsXG5cdFx0MHhGREU5IDogXCJTZXJpYWxOdW1iZXJcIixcblx0XHQweEZERUEgOiBcIkxlbnNcIixcblx0XHQweEZFMDAgOiBcIktEQ19JRkRcIixcblx0XHQweEZFNEMgOiBcIlJhd0ZpbGVcIixcblx0XHQweEZFNEQgOiBcIkNvbnZlcnRlclwiLFxuXHRcdDB4RkU0RSA6IFwiV2hpdGVCYWxhbmNlXCIsXG5cdFx0MHhGRTUxIDogXCJFeHBvc3VyZVwiLFxuXHRcdDB4RkU1MiA6IFwiU2hhZG93c1wiLFxuXHRcdDB4RkU1MyA6IFwiQnJpZ2h0bmVzc1wiLFxuXHRcdDB4RkU1NCA6IFwiQ29udHJhc3RcIixcblx0XHQweEZFNTUgOiBcIlNhdHVyYXRpb25cIixcblx0XHQweEZFNTYgOiBcIlNoYXJwbmVzc1wiLFxuXHRcdDB4RkU1NyA6IFwiU21vb3RobmVzc1wiLFxuXHRcdDB4RkU1OCA6IFwiTW9pcmVGaWx0ZXJcIlxuXHRcdFxuXHR9LFxuXHRncHMgOiB7XHRcblx0XHQweDAwMDAgOiAnR1BTVmVyc2lvbklEJyxcblx0XHQweDAwMDEgOiAnR1BTTGF0aXR1ZGVSZWYnLFxuXHRcdDB4MDAwMiA6ICdHUFNMYXRpdHVkZScsXG5cdFx0MHgwMDAzIDogJ0dQU0xvbmdpdHVkZVJlZicsXG5cdFx0MHgwMDA0IDogJ0dQU0xvbmdpdHVkZScsXG5cdFx0MHgwMDA1IDogJ0dQU0FsdGl0dWRlUmVmJyxcblx0XHQweDAwMDYgOiAnR1BTQWx0aXR1ZGUnLFxuXHRcdDB4MDAwNyA6ICdHUFNUaW1lU3RhbXAnLFxuXHRcdDB4MDAwOCA6ICdHUFNTYXRlbGxpdGVzJyxcblx0XHQweDAwMDkgOiAnR1BTU3RhdHVzJyxcblx0XHQweDAwMEEgOiAnR1BTTWVhc3VyZU1vZGUnLFxuXHRcdDB4MDAwQiA6ICdHUFNET1AnLFxuXHRcdDB4MDAwQyA6ICdHUFNTcGVlZFJlZicsXG5cdFx0MHgwMDBEIDogJ0dQU1NwZWVkJyxcblx0XHQweDAwMEUgOiAnR1BTVHJhY2tSZWYnLFxuXHRcdDB4MDAwRiA6ICdHUFNUcmFjaycsXG5cdFx0MHgwMDEwIDogJ0dQU0ltZ0RpcmVjdGlvblJlZicsXG5cdFx0MHgwMDExIDogJ0dQU0ltZ0RpcmVjdGlvbicsXG5cdFx0MHgwMDEyIDogJ0dQU01hcERhdHVtJyxcblx0XHQweDAwMTMgOiAnR1BTRGVzdExhdGl0dWRlUmVmJyxcblx0XHQweDAwMTQgOiAnR1BTRGVzdExhdGl0dWRlJyxcblx0XHQweDAwMTUgOiAnR1BTRGVzdExvbmdpdHVkZVJlZicsXG5cdFx0MHgwMDE2IDogJ0dQU0Rlc3RMb25naXR1ZGUnLFxuXHRcdDB4MDAxNyA6ICdHUFNEZXN0QmVhcmluZ1JlZicsXG5cdFx0MHgwMDE4IDogJ0dQU0Rlc3RCZWFyaW5nJyxcblx0XHQweDAwMTkgOiAnR1BTRGVzdERpc3RhbmNlUmVmJyxcblx0XHQweDAwMUEgOiAnR1BTRGVzdERpc3RhbmNlJyxcblx0XHQweDAwMUIgOiAnR1BTUHJvY2Vzc2luZ01ldGhvZCcsXG5cdFx0MHgwMDFDIDogJ0dQU0FyZWFJbmZvcm1hdGlvbicsXG5cdFx0MHgwMDFEIDogJ0dQU0RhdGVTdGFtcCcsXG5cdFx0MHgwMDFFIDogJ0dQU0RpZmZlcmVudGlhbCcsXG5cdFx0MHgwMDFGIDogJ0dQU0hQb3NpdGlvbmluZ0Vycm9yJ1xuXHR9XG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZXhpZiIsImdwcyJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBRztJQUNoQkMsTUFBTztRQUNOLFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztJQUVWO0lBQ0FDLEtBQU07UUFDTCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztRQUNULFFBQVM7UUFDVCxRQUFTO1FBQ1QsUUFBUztJQUNWO0FBQ0QiLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXhpZi1wYXJzZXIvbGliL2V4aWYtdGFncy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/exif-parser/lib/exif-tags.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/exif-parser/lib/exif.js":
/*!**********************************************!*\
  !*** ./node_modules/exif-parser/lib/exif.js ***!
  \**********************************************/
/***/ ((module) => {

eval("/*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */ function readExifValue(format, stream) {\n    switch(format){\n        case 1:\n            return stream.nextUInt8();\n        case 3:\n            return stream.nextUInt16();\n        case 4:\n            return stream.nextUInt32();\n        case 5:\n            return [\n                stream.nextUInt32(),\n                stream.nextUInt32()\n            ];\n        case 6:\n            return stream.nextInt8();\n        case 8:\n            return stream.nextUInt16();\n        case 9:\n            return stream.nextUInt32();\n        case 10:\n            return [\n                stream.nextInt32(),\n                stream.nextInt32()\n            ];\n        case 11:\n            return stream.nextFloat();\n        case 12:\n            return stream.nextDouble();\n        default:\n            throw new Error(\"Invalid format while decoding: \" + format);\n    }\n}\nfunction getBytesPerComponent(format) {\n    switch(format){\n        case 1:\n        case 2:\n        case 6:\n        case 7:\n            return 1;\n        case 3:\n        case 8:\n            return 2;\n        case 4:\n        case 9:\n        case 11:\n            return 4;\n        case 5:\n        case 10:\n        case 12:\n            return 8;\n        default:\n            return 0;\n    }\n}\nfunction readExifTag(tiffMarker, stream) {\n    var tagType = stream.nextUInt16(), format = stream.nextUInt16(), bytesPerComponent = getBytesPerComponent(format), components = stream.nextUInt32(), valueBytes = bytesPerComponent * components, values, value, c;\n    /* if the value is bigger then 4 bytes, the value is in the data section of the IFD\n\tand the value present in the tag is the offset starting from the tiff header. So we replace the stream\n\twith a stream that is located at the given offset in the data section. s*/ if (valueBytes > 4) {\n        stream = tiffMarker.openWithOffset(stream.nextUInt32());\n    }\n    //we don't want to read strings as arrays\n    if (format === 2) {\n        values = stream.nextString(components);\n        //cut off \\0 characters\n        var lastNull = values.indexOf(\"\\x00\");\n        if (lastNull !== -1) {\n            values = values.substr(0, lastNull);\n        }\n    } else if (format === 7) {\n        values = stream.nextBuffer(components);\n    } else if (format !== 0) {\n        values = [];\n        for(c = 0; c < components; ++c){\n            values.push(readExifValue(format, stream));\n        }\n    }\n    //since our stream is a stateful object, we need to skip remaining bytes\n    //so our offset stays correct\n    if (valueBytes < 4) {\n        stream.skip(4 - valueBytes);\n    }\n    return [\n        tagType,\n        values,\n        format\n    ];\n}\nfunction readIFDSection(tiffMarker, stream, iterator) {\n    var numberOfEntries = stream.nextUInt16(), tag, i;\n    for(i = 0; i < numberOfEntries; ++i){\n        tag = readExifTag(tiffMarker, stream);\n        iterator(tag[0], tag[1], tag[2]);\n    }\n}\nfunction readHeader(stream) {\n    var exifHeader = stream.nextString(6);\n    if (exifHeader !== \"Exif\\x00\\x00\") {\n        throw new Error(\"Invalid EXIF header\");\n    }\n    var tiffMarker = stream.mark();\n    var tiffHeader = stream.nextUInt16();\n    if (tiffHeader === 0x4949) {\n        stream.setBigEndian(false);\n    } else if (tiffHeader === 0x4D4D) {\n        stream.setBigEndian(true);\n    } else {\n        throw new Error(\"Invalid TIFF header\");\n    }\n    if (stream.nextUInt16() !== 0x002A) {\n        throw new Error(\"Invalid TIFF data\");\n    }\n    return tiffMarker;\n}\nmodule.exports = {\n    IFD0: 1,\n    IFD1: 2,\n    GPSIFD: 3,\n    SubIFD: 4,\n    InteropIFD: 5,\n    parseTags: function(stream, iterator) {\n        var tiffMarker;\n        try {\n            tiffMarker = readHeader(stream);\n        } catch (e) {\n            return false; //ignore APP1 sections with invalid headers\n        }\n        var subIfdOffset, gpsOffset, interopOffset;\n        var ifd0Stream = tiffMarker.openWithOffset(stream.nextUInt32()), IFD0 = this.IFD0;\n        readIFDSection(tiffMarker, ifd0Stream, function(tagType, value, format) {\n            switch(tagType){\n                case 0x8825:\n                    gpsOffset = value[0];\n                    break;\n                case 0x8769:\n                    subIfdOffset = value[0];\n                    break;\n                default:\n                    iterator(IFD0, tagType, value, format);\n                    break;\n            }\n        });\n        var ifd1Offset = ifd0Stream.nextUInt32();\n        if (ifd1Offset !== 0) {\n            var ifd1Stream = tiffMarker.openWithOffset(ifd1Offset);\n            readIFDSection(tiffMarker, ifd1Stream, iterator.bind(null, this.IFD1));\n        }\n        if (gpsOffset) {\n            var gpsStream = tiffMarker.openWithOffset(gpsOffset);\n            readIFDSection(tiffMarker, gpsStream, iterator.bind(null, this.GPSIFD));\n        }\n        if (subIfdOffset) {\n            var subIfdStream = tiffMarker.openWithOffset(subIfdOffset), InteropIFD = this.InteropIFD;\n            readIFDSection(tiffMarker, subIfdStream, function(tagType, value, format) {\n                if (tagType === 0xA005) {\n                    interopOffset = value[0];\n                } else {\n                    iterator(InteropIFD, tagType, value, format);\n                }\n            });\n        }\n        if (interopOffset) {\n            var interopStream = tiffMarker.openWithOffset(interopOffset);\n            readIFDSection(tiffMarker, interopStream, iterator.bind(null, this.InteropIFD));\n        }\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/exif-parser/lib/exif.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/exif-parser/lib/jpeg.js":
/*!**********************************************!*\
  !*** ./node_modules/exif-parser/lib/jpeg.js ***!
  \**********************************************/
/***/ ((module) => {

eval("/*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */ module.exports = {\n    parseSections: function(stream, iterator) {\n        var len, markerType;\n        stream.setBigEndian(true);\n        //stop reading the stream at the SOS (Start of Stream) marker,\n        //because its length is not stored in the header so we can't\n        //know where to jump to. The only marker after that is just EOI (End Of Image) anyway\n        while(stream.remainingLength() > 0 && markerType !== 0xDA){\n            if (stream.nextUInt8() !== 0xFF) {\n                throw new Error(\"Invalid JPEG section offset\");\n            }\n            markerType = stream.nextUInt8();\n            //don't read size from markers that have no datas\n            if (markerType >= 0xD0 && markerType <= 0xD9 || markerType === 0xDA) {\n                len = 0;\n            } else {\n                len = stream.nextUInt16() - 2;\n            }\n            iterator(markerType, stream.branch(0, len));\n            stream.skip(len);\n        }\n    },\n    //stream should be located after SOF section size and in big endian mode, like passed to parseSections iterator\n    getSizeFromSOFSection: function(stream) {\n        stream.skip(1);\n        return {\n            height: stream.nextUInt16(),\n            width: stream.nextUInt16()\n        };\n    },\n    getSectionName: function(markerType) {\n        var name, index;\n        switch(markerType){\n            case 0xD8:\n                name = \"SOI\";\n                break;\n            case 0xC4:\n                name = \"DHT\";\n                break;\n            case 0xDB:\n                name = \"DQT\";\n                break;\n            case 0xDD:\n                name = \"DRI\";\n                break;\n            case 0xDA:\n                name = \"SOS\";\n                break;\n            case 0xFE:\n                name = \"COM\";\n                break;\n            case 0xD9:\n                name = \"EOI\";\n                break;\n            default:\n                if (markerType >= 0xE0 && markerType <= 0xEF) {\n                    name = \"APP\";\n                    index = markerType - 0xE0;\n                } else if (markerType >= 0xC0 && markerType <= 0xCF && markerType !== 0xC4 && markerType !== 0xC8 && markerType !== 0xCC) {\n                    name = \"SOF\";\n                    index = markerType - 0xC0;\n                } else if (markerType >= 0xD0 && markerType <= 0xD7) {\n                    name = \"RST\";\n                    index = markerType - 0xD0;\n                }\n                break;\n        }\n        var nameStruct = {\n            name: name\n        };\n        if (typeof index === \"number\") {\n            nameStruct.index = index;\n        }\n        return nameStruct;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TRE9yZ2FuaXplci8uL25vZGVfbW9kdWxlcy9leGlmLXBhcnNlci9saWIvanBlZy5qcz8yNjViIl0sInNvdXJjZXNDb250ZW50IjpbIi8qanNsaW50IGJyb3dzZXI6IHRydWUsIGRldmVsOiB0cnVlLCBiaXR3aXNlOiBmYWxzZSwgZGVidWc6IHRydWUsIGVxZXE6IGZhbHNlLCBlczU6IHRydWUsIGV2aWw6IGZhbHNlLCBmb3JpbjogZmFsc2UsIG5ld2NhcDogZmFsc2UsIG5vbWVuOiB0cnVlLCBwbHVzcGx1czogdHJ1ZSwgcmVnZXhwOiBmYWxzZSwgdW5wYXJhbTogZmFsc2UsIHNsb3BweTogdHJ1ZSwgc3R1cGlkOiBmYWxzZSwgc3ViOiBmYWxzZSwgdG9kbzogdHJ1ZSwgdmFyczogdHJ1ZSwgd2hpdGU6IHRydWUgKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHBhcnNlU2VjdGlvbnM6IGZ1bmN0aW9uKHN0cmVhbSwgaXRlcmF0b3IpIHtcblx0XHR2YXIgbGVuLCBtYXJrZXJUeXBlO1xuXHRcdHN0cmVhbS5zZXRCaWdFbmRpYW4odHJ1ZSk7XG5cdFx0Ly9zdG9wIHJlYWRpbmcgdGhlIHN0cmVhbSBhdCB0aGUgU09TIChTdGFydCBvZiBTdHJlYW0pIG1hcmtlcixcblx0XHQvL2JlY2F1c2UgaXRzIGxlbmd0aCBpcyBub3Qgc3RvcmVkIGluIHRoZSBoZWFkZXIgc28gd2UgY2FuJ3Rcblx0XHQvL2tub3cgd2hlcmUgdG8ganVtcCB0by4gVGhlIG9ubHkgbWFya2VyIGFmdGVyIHRoYXQgaXMganVzdCBFT0kgKEVuZCBPZiBJbWFnZSkgYW55d2F5XG5cdFx0d2hpbGUoc3RyZWFtLnJlbWFpbmluZ0xlbmd0aCgpID4gMCAmJiBtYXJrZXJUeXBlICE9PSAweERBKSB7XG5cdFx0XHRpZihzdHJlYW0ubmV4dFVJbnQ4KCkgIT09IDB4RkYpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEpQRUcgc2VjdGlvbiBvZmZzZXQnKTtcblx0XHRcdH1cblx0XHRcdG1hcmtlclR5cGUgPSBzdHJlYW0ubmV4dFVJbnQ4KCk7XG5cdFx0XHQvL2Rvbid0IHJlYWQgc2l6ZSBmcm9tIG1hcmtlcnMgdGhhdCBoYXZlIG5vIGRhdGFzXG5cdFx0XHRpZigobWFya2VyVHlwZSA+PSAweEQwICYmIG1hcmtlclR5cGUgPD0gMHhEOSkgfHwgbWFya2VyVHlwZSA9PT0gMHhEQSkge1xuXHRcdFx0XHRsZW4gPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bGVuID0gc3RyZWFtLm5leHRVSW50MTYoKSAtIDI7XG5cdFx0XHR9XG5cdFx0XHRpdGVyYXRvcihtYXJrZXJUeXBlLCBzdHJlYW0uYnJhbmNoKDAsIGxlbikpO1xuXHRcdFx0c3RyZWFtLnNraXAobGVuKTtcblx0XHR9XG5cdH0sXG5cdC8vc3RyZWFtIHNob3VsZCBiZSBsb2NhdGVkIGFmdGVyIFNPRiBzZWN0aW9uIHNpemUgYW5kIGluIGJpZyBlbmRpYW4gbW9kZSwgbGlrZSBwYXNzZWQgdG8gcGFyc2VTZWN0aW9ucyBpdGVyYXRvclxuXHRnZXRTaXplRnJvbVNPRlNlY3Rpb246IGZ1bmN0aW9uKHN0cmVhbSkge1xuXHRcdHN0cmVhbS5za2lwKDEpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRoZWlnaHQ6IHN0cmVhbS5uZXh0VUludDE2KCksXG5cdFx0XHR3aWR0aDogc3RyZWFtLm5leHRVSW50MTYoKVxuXHRcdH07XG5cdH0sXG5cdGdldFNlY3Rpb25OYW1lOiBmdW5jdGlvbihtYXJrZXJUeXBlKSB7XG5cdFx0dmFyIG5hbWUsIGluZGV4O1xuXHRcdHN3aXRjaChtYXJrZXJUeXBlKSB7XG5cdFx0XHRjYXNlIDB4RDg6IG5hbWUgPSAnU09JJzsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4QzQ6IG5hbWUgPSAnREhUJzsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4REI6IG5hbWUgPSAnRFFUJzsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4REQ6IG5hbWUgPSAnRFJJJzsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4REE6IG5hbWUgPSAnU09TJzsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4RkU6IG5hbWUgPSAnQ09NJzsgYnJlYWs7XG5cdFx0XHRjYXNlIDB4RDk6IG5hbWUgPSAnRU9JJzsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRpZihtYXJrZXJUeXBlID49IDB4RTAgJiYgbWFya2VyVHlwZSA8PSAweEVGKSB7XG5cdFx0XHRcdFx0bmFtZSA9ICdBUFAnO1xuXHRcdFx0XHRcdGluZGV4ID0gbWFya2VyVHlwZSAtIDB4RTA7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZihtYXJrZXJUeXBlID49IDB4QzAgJiYgbWFya2VyVHlwZSA8PSAweENGICYmIG1hcmtlclR5cGUgIT09IDB4QzQgJiYgbWFya2VyVHlwZSAhPT0gMHhDOCAmJiBtYXJrZXJUeXBlICE9PSAweENDKSB7XG5cdFx0XHRcdFx0bmFtZSA9ICdTT0YnO1xuXHRcdFx0XHRcdGluZGV4ID0gbWFya2VyVHlwZSAtIDB4QzA7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZihtYXJrZXJUeXBlID49IDB4RDAgJiYgbWFya2VyVHlwZSA8PSAweEQ3KSB7XG5cdFx0XHRcdFx0bmFtZSA9ICdSU1QnO1xuXHRcdFx0XHRcdGluZGV4ID0gbWFya2VyVHlwZSAtIDB4RDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdHZhciBuYW1lU3RydWN0ID0ge1xuXHRcdFx0bmFtZTogbmFtZVxuXHRcdH07XG5cdFx0aWYodHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuXHRcdFx0bmFtZVN0cnVjdC5pbmRleCA9IGluZGV4O1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZVN0cnVjdDtcblx0fVxufTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlU2VjdGlvbnMiLCJzdHJlYW0iLCJpdGVyYXRvciIsImxlbiIsIm1hcmtlclR5cGUiLCJzZXRCaWdFbmRpYW4iLCJyZW1haW5pbmdMZW5ndGgiLCJuZXh0VUludDgiLCJFcnJvciIsIm5leHRVSW50MTYiLCJicmFuY2giLCJza2lwIiwiZ2V0U2l6ZUZyb21TT0ZTZWN0aW9uIiwiaGVpZ2h0Iiwid2lkdGgiLCJnZXRTZWN0aW9uTmFtZSIsIm5hbWUiLCJpbmRleCIsIm5hbWVTdHJ1Y3QiXSwibWFwcGluZ3MiOiJBQUFBLDZRQUE2USxHQUU3UUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCQyxlQUFlLFNBQVNDLE1BQU0sRUFBRUMsUUFBUTtRQUN2QyxJQUFJQyxLQUFLQztRQUNUSCxPQUFPSSxZQUFZLENBQUM7UUFDcEIsOERBQThEO1FBQzlELDREQUE0RDtRQUM1RCxxRkFBcUY7UUFDckYsTUFBTUosT0FBT0ssZUFBZSxLQUFLLEtBQUtGLGVBQWUsS0FBTTtZQUMxRCxJQUFHSCxPQUFPTSxTQUFTLE9BQU8sTUFBTTtnQkFDL0IsTUFBTSxJQUFJQyxNQUFNO1lBQ2pCO1lBQ0FKLGFBQWFILE9BQU9NLFNBQVM7WUFDN0IsaURBQWlEO1lBQ2pELElBQUcsQUFBQ0gsY0FBYyxRQUFRQSxjQUFjLFFBQVNBLGVBQWUsTUFBTTtnQkFDckVELE1BQU07WUFDUCxPQUFPO2dCQUNOQSxNQUFNRixPQUFPUSxVQUFVLEtBQUs7WUFDN0I7WUFDQVAsU0FBU0UsWUFBWUgsT0FBT1MsTUFBTSxDQUFDLEdBQUdQO1lBQ3RDRixPQUFPVSxJQUFJLENBQUNSO1FBQ2I7SUFDRDtJQUNBLCtHQUErRztJQUMvR1MsdUJBQXVCLFNBQVNYLE1BQU07UUFDckNBLE9BQU9VLElBQUksQ0FBQztRQUNaLE9BQU87WUFDTkUsUUFBUVosT0FBT1EsVUFBVTtZQUN6QkssT0FBT2IsT0FBT1EsVUFBVTtRQUN6QjtJQUNEO0lBQ0FNLGdCQUFnQixTQUFTWCxVQUFVO1FBQ2xDLElBQUlZLE1BQU1DO1FBQ1YsT0FBT2I7WUFDTixLQUFLO2dCQUFNWSxPQUFPO2dCQUFPO1lBQ3pCLEtBQUs7Z0JBQU1BLE9BQU87Z0JBQU87WUFDekIsS0FBSztnQkFBTUEsT0FBTztnQkFBTztZQUN6QixLQUFLO2dCQUFNQSxPQUFPO2dCQUFPO1lBQ3pCLEtBQUs7Z0JBQU1BLE9BQU87Z0JBQU87WUFDekIsS0FBSztnQkFBTUEsT0FBTztnQkFBTztZQUN6QixLQUFLO2dCQUFNQSxPQUFPO2dCQUFPO1lBQ3pCO2dCQUNDLElBQUdaLGNBQWMsUUFBUUEsY0FBYyxNQUFNO29CQUM1Q1ksT0FBTztvQkFDUEMsUUFBUWIsYUFBYTtnQkFDdEIsT0FDSyxJQUFHQSxjQUFjLFFBQVFBLGNBQWMsUUFBUUEsZUFBZSxRQUFRQSxlQUFlLFFBQVFBLGVBQWUsTUFBTTtvQkFDdEhZLE9BQU87b0JBQ1BDLFFBQVFiLGFBQWE7Z0JBQ3RCLE9BQ0ssSUFBR0EsY0FBYyxRQUFRQSxjQUFjLE1BQU07b0JBQ2pEWSxPQUFPO29CQUNQQyxRQUFRYixhQUFhO2dCQUN0QjtnQkFDQTtRQUNGO1FBQ0EsSUFBSWMsYUFBYTtZQUNoQkYsTUFBTUE7UUFDUDtRQUNBLElBQUcsT0FBT0MsVUFBVSxVQUFVO1lBQzdCQyxXQUFXRCxLQUFLLEdBQUdBO1FBQ3BCO1FBQ0EsT0FBT0M7SUFDUjtBQUNEIiwiZmlsZSI6Iihzc3IpLy4vbm9kZV9tb2R1bGVzL2V4aWYtcGFyc2VyL2xpYi9qcGVnLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/exif-parser/lib/jpeg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/exif-parser/lib/parser.js":
/*!************************************************!*\
  !*** ./node_modules/exif-parser/lib/parser.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*jslint browser: true, devel: true, bitwise: false, debug: true, eqeq: false, es5: true, evil: false, forin: false, newcap: false, nomen: true, plusplus: true, regexp: false, unparam: false, sloppy: true, stupid: false, sub: false, todo: true, vars: true, white: true */ var jpeg = __webpack_require__(/*! ./jpeg */ \"(ssr)/./node_modules/exif-parser/lib/jpeg.js\"), exif = __webpack_require__(/*! ./exif */ \"(ssr)/./node_modules/exif-parser/lib/exif.js\"), simplify = __webpack_require__(/*! ./simplify */ \"(ssr)/./node_modules/exif-parser/lib/simplify.js\");\nfunction ExifResult(startMarker, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset) {\n    this.startMarker = startMarker;\n    this.tags = tags;\n    this.imageSize = imageSize;\n    this.thumbnailOffset = thumbnailOffset;\n    this.thumbnailLength = thumbnailLength;\n    this.thumbnailType = thumbnailType;\n    this.app1Offset = app1Offset;\n}\nExifResult.prototype = {\n    hasThumbnail: function(mime) {\n        if (!this.thumbnailOffset || !this.thumbnailLength) {\n            return false;\n        }\n        if (typeof mime !== \"string\") {\n            return true;\n        }\n        if (mime.toLowerCase().trim() === \"image/jpeg\") {\n            return this.thumbnailType === 6;\n        }\n        if (mime.toLowerCase().trim() === \"image/tiff\") {\n            return this.thumbnailType === 1;\n        }\n        return false;\n    },\n    getThumbnailOffset: function() {\n        return this.app1Offset + 6 + this.thumbnailOffset;\n    },\n    getThumbnailLength: function() {\n        return this.thumbnailLength;\n    },\n    getThumbnailBuffer: function() {\n        return this._getThumbnailStream().nextBuffer(this.thumbnailLength);\n    },\n    _getThumbnailStream: function() {\n        return this.startMarker.openWithOffset(this.getThumbnailOffset());\n    },\n    getImageSize: function() {\n        return this.imageSize;\n    },\n    getThumbnailSize: function() {\n        var stream = this._getThumbnailStream(), size;\n        jpeg.parseSections(stream, function(sectionType, sectionStream) {\n            if (jpeg.getSectionName(sectionType).name === \"SOF\") {\n                size = jpeg.getSizeFromSOFSection(sectionStream);\n            }\n        });\n        return size;\n    }\n};\nfunction Parser(stream) {\n    this.stream = stream;\n    this.flags = {\n        readBinaryTags: false,\n        resolveTagNames: true,\n        simplifyValues: true,\n        imageSize: true,\n        hidePointers: true,\n        returnTags: true\n    };\n}\nParser.prototype = {\n    enableBinaryFields: function(enable) {\n        this.flags.readBinaryTags = !!enable;\n        return this;\n    },\n    enablePointers: function(enable) {\n        this.flags.hidePointers = !enable;\n        return this;\n    },\n    enableTagNames: function(enable) {\n        this.flags.resolveTagNames = !!enable;\n        return this;\n    },\n    enableImageSize: function(enable) {\n        this.flags.imageSize = !!enable;\n        return this;\n    },\n    enableReturnTags: function(enable) {\n        this.flags.returnTags = !!enable;\n        return this;\n    },\n    enableSimpleValues: function(enable) {\n        this.flags.simplifyValues = !!enable;\n        return this;\n    },\n    parse: function() {\n        var start = this.stream.mark(), stream = start.openWithOffset(0), flags = this.flags, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset, tagNames, getTagValue, setTagValue;\n        if (flags.resolveTagNames) {\n            tagNames = __webpack_require__(/*! ./exif-tags */ \"(ssr)/./node_modules/exif-parser/lib/exif-tags.js\");\n        }\n        if (flags.resolveTagNames) {\n            tags = {};\n            getTagValue = function(t) {\n                return tags[t.name];\n            };\n            setTagValue = function(t, value) {\n                tags[t.name] = value;\n            };\n        } else {\n            tags = [];\n            getTagValue = function(t) {\n                var i;\n                for(i = 0; i < tags.length; ++i){\n                    if (tags[i].type === t.type && tags[i].section === t.section) {\n                        return tags.value;\n                    }\n                }\n            };\n            setTagValue = function(t, value) {\n                var i;\n                for(i = 0; i < tags.length; ++i){\n                    if (tags[i].type === t.type && tags[i].section === t.section) {\n                        tags.value = value;\n                        return;\n                    }\n                }\n            };\n        }\n        jpeg.parseSections(stream, function(sectionType, sectionStream) {\n            var validExifHeaders, sectionOffset = sectionStream.offsetFrom(start);\n            if (sectionType === 0xE1) {\n                validExifHeaders = exif.parseTags(sectionStream, function(ifdSection, tagType, value, format) {\n                    //ignore binary fields if disabled\n                    if (!flags.readBinaryTags && format === 7) {\n                        return;\n                    }\n                    if (tagType === 0x0201) {\n                        thumbnailOffset = value[0];\n                        if (flags.hidePointers) {\n                            return;\n                        }\n                    } else if (tagType === 0x0202) {\n                        thumbnailLength = value[0];\n                        if (flags.hidePointers) {\n                            return;\n                        }\n                    } else if (tagType === 0x0103) {\n                        thumbnailType = value[0];\n                        if (flags.hidePointers) {\n                            return;\n                        }\n                    }\n                    //if flag is set to not store tags, return here after storing pointers\n                    if (!flags.returnTags) {\n                        return;\n                    }\n                    if (flags.simplifyValues) {\n                        value = simplify.simplifyValue(value, format);\n                    }\n                    if (flags.resolveTagNames) {\n                        var sectionTagNames = ifdSection === exif.GPSIFD ? tagNames.gps : tagNames.exif;\n                        var name = sectionTagNames[tagType];\n                        if (!name) {\n                            name = tagNames.exif[tagType];\n                        }\n                        if (!tags.hasOwnProperty(name)) {\n                            tags[name] = value;\n                        }\n                    } else {\n                        tags.push({\n                            section: ifdSection,\n                            type: tagType,\n                            value: value\n                        });\n                    }\n                });\n                if (validExifHeaders) {\n                    app1Offset = sectionOffset;\n                }\n            } else if (flags.imageSize && jpeg.getSectionName(sectionType).name === \"SOF\") {\n                imageSize = jpeg.getSizeFromSOFSection(sectionStream);\n            }\n        });\n        if (flags.simplifyValues) {\n            simplify.castDegreeValues(getTagValue, setTagValue);\n            simplify.castDateValues(getTagValue, setTagValue);\n        }\n        return new ExifResult(start, tags, imageSize, thumbnailOffset, thumbnailLength, thumbnailType, app1Offset);\n    }\n};\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/exif-parser/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/exif-parser/lib/simplify.js":
/*!**************************************************!*\
  !*** ./node_modules/exif-parser/lib/simplify.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var exif = __webpack_require__(/*! ./exif */ \"(ssr)/./node_modules/exif-parser/lib/exif.js\");\nvar date = __webpack_require__(/*! ./date */ \"(ssr)/./node_modules/exif-parser/lib/date.js\");\nvar degreeTags = [\n    {\n        section: exif.GPSIFD,\n        type: 0x0002,\n        name: \"GPSLatitude\",\n        refType: 0x0001,\n        refName: \"GPSLatitudeRef\",\n        posVal: \"N\"\n    },\n    {\n        section: exif.GPSIFD,\n        type: 0x0004,\n        name: \"GPSLongitude\",\n        refType: 0x0003,\n        refName: \"GPSLongitudeRef\",\n        posVal: \"E\"\n    }\n];\nvar dateTags = [\n    {\n        section: exif.SubIFD,\n        type: 0x0132,\n        name: \"ModifyDate\"\n    },\n    {\n        section: exif.SubIFD,\n        type: 0x9003,\n        name: \"DateTimeOriginal\"\n    },\n    {\n        section: exif.SubIFD,\n        type: 0x9004,\n        name: \"CreateDate\"\n    },\n    {\n        section: exif.SubIFD,\n        type: 0x0132,\n        name: \"ModifyDate\"\n    }\n];\nmodule.exports = {\n    castDegreeValues: function(getTagValue, setTagValue) {\n        degreeTags.forEach(function(t) {\n            var degreeVal = getTagValue(t);\n            if (degreeVal) {\n                var degreeRef = getTagValue({\n                    section: t.section,\n                    type: t.refType,\n                    name: t.refName\n                });\n                var degreeNumRef = degreeRef === t.posVal ? 1 : -1;\n                var degree = (degreeVal[0] + degreeVal[1] / 60 + degreeVal[2] / 3600) * degreeNumRef;\n                setTagValue(t, degree);\n            }\n        });\n    },\n    castDateValues: function(getTagValue, setTagValue) {\n        dateTags.forEach(function(t) {\n            var dateStrVal = getTagValue(t);\n            if (dateStrVal) {\n                //some easy checks to determine two common date formats\n                var timestamp = date.parseExifDate(dateStrVal);\n                if (typeof timestamp !== \"undefined\") {\n                    setTagValue(t, timestamp);\n                }\n            }\n        });\n    },\n    simplifyValue: function(values, format) {\n        if (Array.isArray(values)) {\n            values = values.map(function(value) {\n                if (format === 10 || format === 5) {\n                    return value[0] / value[1];\n                }\n                return value;\n            });\n            if (values.length === 1) {\n                values = values[0];\n            }\n        }\n        return values;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXhpZi1wYXJzZXIvbGliL3NpbXBsaWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBRW5CLElBQUlFLGFBQWE7SUFBQztRQUNqQkMsU0FBU0osS0FBS0ssTUFBTTtRQUNwQkMsTUFBTTtRQUNOQyxNQUFNO1FBQ05DLFNBQVM7UUFDVEMsU0FBUztRQUNUQyxRQUFRO0lBQ1Q7SUFDQTtRQUNDTixTQUFTSixLQUFLSyxNQUFNO1FBQ3BCQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsU0FBUztRQUNUQyxTQUFTO1FBQ1RDLFFBQVE7SUFDVDtDQUFFO0FBQ0YsSUFBSUMsV0FBVztJQUFDO1FBQ2ZQLFNBQVNKLEtBQUtZLE1BQU07UUFDcEJOLE1BQU07UUFDTkMsTUFBTTtJQUNQO0lBQ0E7UUFDQ0gsU0FBU0osS0FBS1ksTUFBTTtRQUNwQk4sTUFBTTtRQUNOQyxNQUFNO0lBQ1A7SUFDQTtRQUNDSCxTQUFTSixLQUFLWSxNQUFNO1FBQ3BCTixNQUFNO1FBQ05DLE1BQU07SUFDUDtJQUNBO1FBQ0NILFNBQVNKLEtBQUtZLE1BQU07UUFDcEJOLE1BQU07UUFDTkMsTUFBTztJQUNSO0NBQUU7QUFFRk0sT0FBT0MsT0FBTyxHQUFHO0lBQ2hCQyxrQkFBa0IsU0FBU0MsV0FBVyxFQUFFQyxXQUFXO1FBQ2xEZCxXQUFXZSxPQUFPLENBQUMsU0FBU0MsQ0FBQztZQUM1QixJQUFJQyxZQUFZSixZQUFZRztZQUM1QixJQUFHQyxXQUFXO2dCQUNiLElBQUlDLFlBQVlMLFlBQVk7b0JBQUNaLFNBQVNlLEVBQUVmLE9BQU87b0JBQUVFLE1BQU1hLEVBQUVYLE9BQU87b0JBQUVELE1BQU1ZLEVBQUVWLE9BQU87Z0JBQUE7Z0JBQ2pGLElBQUlhLGVBQWVELGNBQWNGLEVBQUVULE1BQU0sR0FBRyxJQUFJLENBQUM7Z0JBQ2pELElBQUlhLFNBQVMsQ0FBQ0gsU0FBUyxDQUFDLEVBQUUsR0FBSUEsU0FBUyxDQUFDLEVBQUUsR0FBRyxLQUFPQSxTQUFTLENBQUMsRUFBRSxHQUFHLElBQUksSUFBS0U7Z0JBQzVFTCxZQUFZRSxHQUFHSTtZQUNoQjtRQUNEO0lBQ0Q7SUFDQUMsZ0JBQWdCLFNBQVNSLFdBQVcsRUFBRUMsV0FBVztRQUNoRE4sU0FBU08sT0FBTyxDQUFDLFNBQVNDLENBQUM7WUFDMUIsSUFBSU0sYUFBYVQsWUFBWUc7WUFDN0IsSUFBR00sWUFBWTtnQkFDZCx1REFBdUQ7Z0JBQ3ZELElBQUlDLFlBQVl4QixLQUFLeUIsYUFBYSxDQUFDRjtnQkFDbkMsSUFBRyxPQUFPQyxjQUFjLGFBQWE7b0JBQ3BDVCxZQUFZRSxHQUFHTztnQkFDaEI7WUFDRDtRQUNEO0lBQ0Q7SUFDQUUsZUFBZSxTQUFTQyxNQUFNLEVBQUVDLE1BQU07UUFDckMsSUFBR0MsTUFBTUMsT0FBTyxDQUFDSCxTQUFTO1lBQ3pCQSxTQUFTQSxPQUFPSSxHQUFHLENBQUMsU0FBU0MsS0FBSztnQkFDakMsSUFBR0osV0FBVyxNQUFNQSxXQUFXLEdBQUc7b0JBQ2pDLE9BQU9JLEtBQUssQ0FBQyxFQUFFLEdBQUdBLEtBQUssQ0FBQyxFQUFFO2dCQUMzQjtnQkFDQSxPQUFPQTtZQUNSO1lBQ0EsSUFBR0wsT0FBT00sTUFBTSxLQUFLLEdBQUc7Z0JBQ3ZCTixTQUFTQSxNQUFNLENBQUMsRUFBRTtZQUNuQjtRQUNEO1FBQ0EsT0FBT0E7SUFDUjtBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vU0RPcmdhbml6ZXIvLi9ub2RlX21vZHVsZXMvZXhpZi1wYXJzZXIvbGliL3NpbXBsaWZ5LmpzP2EyZjciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGV4aWYgPSByZXF1aXJlKCcuL2V4aWYnKTtcbnZhciBkYXRlID0gcmVxdWlyZSgnLi9kYXRlJyk7XG5cbnZhciBkZWdyZWVUYWdzID0gW3tcblx0c2VjdGlvbjogZXhpZi5HUFNJRkQsXG5cdHR5cGU6IDB4MDAwMixcblx0bmFtZTogJ0dQU0xhdGl0dWRlJyxcblx0cmVmVHlwZTogMHgwMDAxLFxuXHRyZWZOYW1lOiAnR1BTTGF0aXR1ZGVSZWYnLFxuXHRwb3NWYWw6ICdOJ1xufSxcbntcblx0c2VjdGlvbjogZXhpZi5HUFNJRkQsXG5cdHR5cGU6IDB4MDAwNCxcblx0bmFtZTogJ0dQU0xvbmdpdHVkZScsXG5cdHJlZlR5cGU6IDB4MDAwMyxcblx0cmVmTmFtZTogJ0dQU0xvbmdpdHVkZVJlZicsXG5cdHBvc1ZhbDogJ0UnXG59XTtcbnZhciBkYXRlVGFncyA9IFt7XG5cdHNlY3Rpb246IGV4aWYuU3ViSUZELFxuXHR0eXBlOiAweDAxMzIsXG5cdG5hbWU6ICdNb2RpZnlEYXRlJ1xufSxcbntcblx0c2VjdGlvbjogZXhpZi5TdWJJRkQsXG5cdHR5cGU6IDB4OTAwMyxcblx0bmFtZTogJ0RhdGVUaW1lT3JpZ2luYWwnXG59LFxue1xuXHRzZWN0aW9uOiBleGlmLlN1YklGRCxcblx0dHlwZTogMHg5MDA0LFxuXHRuYW1lOiAnQ3JlYXRlRGF0ZSdcbn0sXG57XG5cdHNlY3Rpb246IGV4aWYuU3ViSUZELFxuXHR0eXBlOiAweDAxMzIsXG5cdG5hbWUgOiAnTW9kaWZ5RGF0ZScsXG59XTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGNhc3REZWdyZWVWYWx1ZXM6IGZ1bmN0aW9uKGdldFRhZ1ZhbHVlLCBzZXRUYWdWYWx1ZSkge1xuXHRcdGRlZ3JlZVRhZ3MuZm9yRWFjaChmdW5jdGlvbih0KSB7XG5cdFx0XHR2YXIgZGVncmVlVmFsID0gZ2V0VGFnVmFsdWUodCk7XG5cdFx0XHRpZihkZWdyZWVWYWwpIHtcblx0XHRcdFx0dmFyIGRlZ3JlZVJlZiA9IGdldFRhZ1ZhbHVlKHtzZWN0aW9uOiB0LnNlY3Rpb24sIHR5cGU6IHQucmVmVHlwZSwgbmFtZTogdC5yZWZOYW1lfSk7XG5cdFx0XHRcdHZhciBkZWdyZWVOdW1SZWYgPSBkZWdyZWVSZWYgPT09IHQucG9zVmFsID8gMSA6IC0xO1xuXHRcdFx0XHR2YXIgZGVncmVlID0gKGRlZ3JlZVZhbFswXSArIChkZWdyZWVWYWxbMV0gLyA2MCkgKyAoZGVncmVlVmFsWzJdIC8gMzYwMCkpICogZGVncmVlTnVtUmVmO1xuXHRcdFx0XHRzZXRUYWdWYWx1ZSh0LCBkZWdyZWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXHRjYXN0RGF0ZVZhbHVlczogZnVuY3Rpb24oZ2V0VGFnVmFsdWUsIHNldFRhZ1ZhbHVlKSB7XG5cdFx0ZGF0ZVRhZ3MuZm9yRWFjaChmdW5jdGlvbih0KSB7XG5cdFx0XHR2YXIgZGF0ZVN0clZhbCA9IGdldFRhZ1ZhbHVlKHQpO1xuXHRcdFx0aWYoZGF0ZVN0clZhbCkge1xuXHRcdFx0XHQvL3NvbWUgZWFzeSBjaGVja3MgdG8gZGV0ZXJtaW5lIHR3byBjb21tb24gZGF0ZSBmb3JtYXRzXG5cdFx0XHRcdHZhciB0aW1lc3RhbXAgPSBkYXRlLnBhcnNlRXhpZkRhdGUoZGF0ZVN0clZhbCk7XG5cdFx0XHRcdGlmKHR5cGVvZiB0aW1lc3RhbXAgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0c2V0VGFnVmFsdWUodCwgdGltZXN0YW1wKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXHRzaW1wbGlmeVZhbHVlOiBmdW5jdGlvbih2YWx1ZXMsIGZvcm1hdCkge1xuXHRcdGlmKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuXHRcdFx0dmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0XHRpZihmb3JtYXQgPT09IDEwIHx8IGZvcm1hdCA9PT0gNSkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZVswXSAvIHZhbHVlWzFdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH0pO1xuXHRcdFx0aWYodmFsdWVzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHR2YWx1ZXMgPSB2YWx1ZXNbMF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZXM7XG5cdH1cbn07XG4iXSwibmFtZXMiOlsiZXhpZiIsInJlcXVpcmUiLCJkYXRlIiwiZGVncmVlVGFncyIsInNlY3Rpb24iLCJHUFNJRkQiLCJ0eXBlIiwibmFtZSIsInJlZlR5cGUiLCJyZWZOYW1lIiwicG9zVmFsIiwiZGF0ZVRhZ3MiLCJTdWJJRkQiLCJtb2R1bGUiLCJleHBvcnRzIiwiY2FzdERlZ3JlZVZhbHVlcyIsImdldFRhZ1ZhbHVlIiwic2V0VGFnVmFsdWUiLCJmb3JFYWNoIiwidCIsImRlZ3JlZVZhbCIsImRlZ3JlZVJlZiIsImRlZ3JlZU51bVJlZiIsImRlZ3JlZSIsImNhc3REYXRlVmFsdWVzIiwiZGF0ZVN0clZhbCIsInRpbWVzdGFtcCIsInBhcnNlRXhpZkRhdGUiLCJzaW1wbGlmeVZhbHVlIiwidmFsdWVzIiwiZm9ybWF0IiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwidmFsdWUiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/exif-parser/lib/simplify.js\n");

/***/ })

};
;